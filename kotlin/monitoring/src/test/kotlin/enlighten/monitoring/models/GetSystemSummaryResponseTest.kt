/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package enlighten.monitoring.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import enlighten.monitoring.models.GetSystemSummaryResponse
import enlighten.monitoring.models.SystemStatusEnum

class GetSystemSummaryResponseTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of GetSystemSummaryResponse
        //val modelInstance = GetSystemSummaryResponse()

        // to test the property `systemId` - Unique numeric ID of the system.
        should("test systemId") {
            // uncomment below to test the property
            //modelInstance.systemId shouldBe ("TODO")
        }

        // to test the property `currentPower` - Current power production of the system in Watts.
        should("test currentPower") {
            // uncomment below to test the property
            //modelInstance.currentPower shouldBe ("TODO")
        }

        // to test the property `energyLifetime` - Energy generated by the system during its lifetime in Wh.
        should("test energyLifetime") {
            // uncomment below to test the property
            //modelInstance.energyLifetime shouldBe ("TODO")
        }

        // to test the property `energyToday` - Energy generated by the system today in Wh.
        should("test energyToday") {
            // uncomment below to test the property
            //modelInstance.energyToday shouldBe ("TODO")
        }

        // to test the property `lastIntervalEndAt` - Last known time that the system produced energy. When a system has not been communicating for a length of time, the last_report_at can be recent, whereas the last_interval_end_at may be further back.
        should("test lastIntervalEndAt") {
            // uncomment below to test the property
            //modelInstance.lastIntervalEndAt shouldBe ("TODO")
        }

        // to test the property `lastReportAt` - Timestamp (in epoch format) at which the system's Envoy last submitted a report.
        should("test lastReportAt") {
            // uncomment below to test the property
            //modelInstance.lastReportAt shouldBe ("TODO")
        }

        // to test the property `modules` - Total number of modules in the system.
        should("test modules") {
            // uncomment below to test the property
            //modelInstance.modules shouldBe ("TODO")
        }

        // to test the property `operationalAt` - Timestamp (in epoch format) at which this system became operational. Corresponds to the system's interconnect time, if one is specified. Otherwise, it is the system's first reported interval end time.
        should("test operationalAt") {
            // uncomment below to test the property
            //modelInstance.operationalAt shouldBe ("TODO")
        }

        // to test the property `sizeW` - System size in watts.
        should("test sizeW") {
            // uncomment below to test the property
            //modelInstance.sizeW shouldBe ("TODO")
        }

        // to test the property `source` - Source of energy measurement.
        should("test source") {
            // uncomment below to test the property
            //modelInstance.source shouldBe ("TODO")
        }

        // to test the property `status`
        should("test status") {
            // uncomment below to test the property
            //modelInstance.status shouldBe ("TODO")
        }

        // to test the property `summaryDate` - Summary date.
        should("test summaryDate") {
            // uncomment below to test the property
            //modelInstance.summaryDate shouldBe ("TODO")
        }

    }
}
