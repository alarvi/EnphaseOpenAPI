/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package enlighten.monitoring.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import enlighten.monitoring.models.LoadControlSettingsLoadControlDataInner

class LoadControlSettingsLoadControlDataInnerTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of LoadControlSettingsLoadControlDataInner
        //val modelInstance = LoadControlSettingsLoadControlDataInner()

        // to test the property `name` - Name of the dry contact.
        should("test name") {
            // uncomment below to test the property
            //modelInstance.name shouldBe ("TODO")
        }

        // to test the property `loadName` - Name of the load.
        should("test loadName") {
            // uncomment below to test the property
            //modelInstance.loadName shouldBe ("TODO")
        }

        // to test the property `ownerCanOverride` - HOs ability to override the load control settings.
        should("test ownerCanOverride") {
            // uncomment below to test the property
            //modelInstance.ownerCanOverride shouldBe ("TODO")
        }

        // to test the property `mode` - Current load control configuration.
        should("test mode") {
            // uncomment below to test the property
            //modelInstance.mode shouldBe ("TODO")
        }

        // to test the property `socLow` - Applicable for advanced mode. Load will be powered off when the battery soc reaches this level.
        should("test socLow") {
            // uncomment below to test the property
            //modelInstance.socLow shouldBe ("TODO")
        }

        // to test the property `socHigh` - Applicable for advanced mode. Load powers off when battery reaches soc_low. The load will be powered on when the battery soc reaches soc_high.
        should("test socHigh") {
            // uncomment below to test the property
            //modelInstance.socHigh shouldBe ("TODO")
        }

        // to test the property `status` - Available values are enabled, disabled.
        should("test status") {
            // uncomment below to test the property
            //modelInstance.status shouldBe ("TODO")
        }

        // to test the property `essentialStartTime` - Applicable for scheduled mode. Time in seconds. Load will powered on between essential_start_time and essential_end_time.
        should("test essentialStartTime") {
            // uncomment below to test the property
            //modelInstance.essentialStartTime shouldBe ("TODO")
        }

        // to test the property `essentialEndTime` - Applicable for scheduled mode. Time in seconds. Load will powered on between essential_start_time and essential_end_time.
        should("test essentialEndTime") {
            // uncomment below to test the property
            //modelInstance.essentialEndTime shouldBe ("TODO")
        }

    }
}
