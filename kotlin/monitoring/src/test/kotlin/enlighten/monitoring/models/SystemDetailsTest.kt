/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package enlighten.monitoring.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import enlighten.monitoring.models.SystemDetails
import enlighten.monitoring.models.SystemAttachmentTypeEnum
import enlighten.monitoring.models.SystemConnectionTypeEnum
import enlighten.monitoring.models.SystemDetailsAddress
import enlighten.monitoring.models.SystemStatusEnum

class SystemDetailsTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of SystemDetails
        //val modelInstance = SystemDetails()

        // to test the property `systemId` - Unique numeric ID of the system.
        should("test systemId") {
            // uncomment below to test the property
            //modelInstance.systemId shouldBe ("TODO")
        }

        // to test the property `name` - Name of the system.
        should("test name") {
            // uncomment below to test the property
            //modelInstance.name shouldBe ("TODO")
        }

        // to test the property `publicName` - Name displayed on the public system page. Available values are All, Residential System, Commercial etc. Default='Residential System'. Only for systems that allow public access.
        should("test publicName") {
            // uncomment below to test the property
            //modelInstance.publicName shouldBe ("TODO")
        }

        // to test the property `timezone` - Timezone to which the system belongs.
        should("test timezone") {
            // uncomment below to test the property
            //modelInstance.timezone shouldBe ("TODO")
        }

        // to test the property `address`
        should("test address") {
            // uncomment below to test the property
            //modelInstance.address shouldBe ("TODO")
        }

        // to test the property `connectionType`
        should("test connectionType") {
            // uncomment below to test the property
            //modelInstance.connectionType shouldBe ("TODO")
        }

        // to test the property `energyLifetime` - Energy generated by the system during its lifetime in Wh. It is returned only if the count is less than or equal to 100.
        should("test energyLifetime") {
            // uncomment below to test the property
            //modelInstance.energyLifetime shouldBe ("TODO")
        }

        // to test the property `energyToday` - Energy generated by the system today in Wh. It is returned only if the count is less than or equal to 100.
        should("test energyToday") {
            // uncomment below to test the property
            //modelInstance.energyToday shouldBe ("TODO")
        }

        // to test the property `systemSize` - Size of the system. It is returned only if the count is less than or equal to 100.
        should("test systemSize") {
            // uncomment below to test the property
            //modelInstance.systemSize shouldBe ("TODO")
        }

        // to test the property `status`
        should("test status") {
            // uncomment below to test the property
            //modelInstance.status shouldBe ("TODO")
        }

        // to test the property `lastReportAt` - Timestamp (in epoch format) at which the system's Envoy last submitted a report.
        should("test lastReportAt") {
            // uncomment below to test the property
            //modelInstance.lastReportAt shouldBe ("TODO")
        }

        // to test the property `lastEnergyAt` - Timestamp (in epoch format) at which the system's produced energy was last reported. Even if the last produced energy is 0, its timestamp will be returned.
        should("test lastEnergyAt") {
            // uncomment below to test the property
            //modelInstance.lastEnergyAt shouldBe ("TODO")
        }

        // to test the property `operationalAt` - Timestamp (in epoch format) at which this system became operational. Corresponds to the system's interconnect time, if one is specified. Otherwise, it is the system's first reported interval end time.
        should("test operationalAt") {
            // uncomment below to test the property
            //modelInstance.operationalAt shouldBe ("TODO")
        }

        // to test the property `attachmentType`
        should("test attachmentType") {
            // uncomment below to test the property
            //modelInstance.attachmentType shouldBe ("TODO")
        }

        // to test the property `interconnectDate` - Date on which the system was approved to connect to the grid.
        should("test interconnectDate") {
            // uncomment below to test the property
            //modelInstance.interconnectDate shouldBe ("TODO")
        }

        // to test the property `reference` - If the calling user belongs to a company and that company has provided its own identifier for a system, that ID is included here. Otherwise, this attribute is not returned.
        should("test reference") {
            // uncomment below to test the property
            //modelInstance.reference shouldBe ("TODO")
        }

        // to test the property `otherReferences` - If any other companies have provided their own identifiers for a system, those identifiers are included here. Otherwise, this attribute is not returned.
        should("test otherReferences") {
            // uncomment below to test the property
            //modelInstance.otherReferences shouldBe ("TODO")
        }

    }
}
