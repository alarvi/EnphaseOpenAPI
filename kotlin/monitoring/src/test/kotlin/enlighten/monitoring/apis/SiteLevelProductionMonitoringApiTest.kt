/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package enlighten.monitoring.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import enlighten.monitoring.apis.SiteLevelProductionMonitoringApi
import enlighten.monitoring.models.ClientError
import enlighten.monitoring.models.GetSystemEnergyLifetimeResponse
import enlighten.monitoring.models.GetSystemProductionMeterReadingsResponse
import enlighten.monitoring.models.GetSystemProductionMeterTelemetryResponse
import enlighten.monitoring.models.GetSystemProductionMicroTelemetryResponse
import enlighten.monitoring.models.GetSystemRgmStatsResponse
import enlighten.monitoring.models.GetSystems500Response
import enlighten.monitoring.models.MethodNotAllowedError
import enlighten.monitoring.models.NotImplementedError
import enlighten.monitoring.models.SystemEnergyLifetimeProductionEnum
import enlighten.monitoring.models.TelemetryGranularityEnum
import enlighten.monitoring.models.TooManyRequestsError

class SiteLevelProductionMonitoringApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of SiteLevelProductionMonitoringApi
        //val apiInstance = SiteLevelProductionMonitoringApi()

        // to test getSystemEnergyLifetime
        should("test getSystemEnergyLifetime") {
            // uncomment below to test getSystemEnergyLifetime
            //val systemId : kotlin.Int = 56 // kotlin.Int | Unique numeric ID of the system.
            //val startDate : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | Start date of the time series data. Defaults to the system's operational date. If the start_date is earlier than the system's operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format.
            //val endDate : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format.
            //val production : SystemEnergyLifetimeProductionEnum =  // SystemEnergyLifetimeProductionEnum | When 'all', returns the merged time series plus the time series as reported by the microinverters and the meter on the system. Other values are ignored.
            //val result : GetSystemEnergyLifetimeResponse = apiInstance.getSystemEnergyLifetime(systemId, startDate, endDate, production)
            //result shouldBe ("TODO")
        }

        // to test getSystemProductionMeterReadings
        should("test getSystemProductionMeterReadings") {
            // uncomment below to test getSystemProductionMeterReadings
            //val systemId : kotlin.Int = 56 // kotlin.Int | Unique numeric ID of the system.
            //val endAt : kotlin.Long = 789 // kotlin.Long | End of reporting period in Unix epoch time. If no end is specified, defaults to the time of the request. If the end is later than the last reported interval the response data ends with the last reported interval.
            //val result : GetSystemProductionMeterReadingsResponse = apiInstance.getSystemProductionMeterReadings(systemId, endAt)
            //result shouldBe ("TODO")
        }

        // to test getSystemProductionMeterTelemetry
        should("test getSystemProductionMeterTelemetry") {
            // uncomment below to test getSystemProductionMeterTelemetry
            //val systemId : kotlin.Int = 56 // kotlin.Int | Unique numeric ID of the system.
            //val startAt : kotlin.Long = 789 // kotlin.Long | Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response.
            //val granularity : TelemetryGranularityEnum =  // TelemetryGranularityEnum | Granularity of the telemetry data. Default is 'day'.
            //val result : GetSystemProductionMeterTelemetryResponse = apiInstance.getSystemProductionMeterTelemetry(systemId, startAt, granularity)
            //result shouldBe ("TODO")
        }

        // to test getSystemProductionMicroTelemetry
        should("test getSystemProductionMicroTelemetry") {
            // uncomment below to test getSystemProductionMicroTelemetry
            //val systemId : kotlin.Int = 56 // kotlin.Int | Unique numeric ID of the system.
            //val startAt : kotlin.Long = 789 // kotlin.Long | Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response.
            //val granularity : TelemetryGranularityEnum =  // TelemetryGranularityEnum | Granularity of the telemetry data. Default is 'day'.
            //val result : GetSystemProductionMicroTelemetryResponse = apiInstance.getSystemProductionMicroTelemetry(systemId, startAt, granularity)
            //result shouldBe ("TODO")
        }

        // to test getSystemRgmStats
        should("test getSystemRgmStats") {
            // uncomment below to test getSystemRgmStats
            //val systemId : kotlin.Int = 56 // kotlin.Int | Unique numeric ID of the system.
            //val startAt : kotlin.Long = 789 // kotlin.Long | Start of period to report on in Unix epoch time. If no start is specified, the assumed start is midnight today, in the timezone of the system. If the start is earlier than one year ago, the response includes an empty intervals list. If the start is earlier than the system's operational_date, the response data begins at midnight of the first reported interval date.
            //val endAt : kotlin.Long = 789 // kotlin.Long | End of reporting period in Unix epoch time. If no end is specified, default to the time of the request or (start time + 1 week), whichever is earlier. If the end is later than the last reported interval the response data ends with the last reported interval.
            //val result : GetSystemRgmStatsResponse = apiInstance.getSystemRgmStats(systemId, startAt, endAt)
            //result shouldBe ("TODO")
        }

    }
}
