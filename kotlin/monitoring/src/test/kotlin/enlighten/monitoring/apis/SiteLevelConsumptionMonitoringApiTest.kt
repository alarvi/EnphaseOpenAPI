/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package enlighten.monitoring.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import enlighten.monitoring.apis.SiteLevelConsumptionMonitoringApi
import enlighten.monitoring.models.ClientError
import enlighten.monitoring.models.GetSystemBatteryLifetimeResponse
import enlighten.monitoring.models.GetSystemBatteryTelemetryResponse
import enlighten.monitoring.models.GetSystemConsumptionLifetimeResponse
import enlighten.monitoring.models.GetSystemConsumptionMeterTelemetryResponse
import enlighten.monitoring.models.GetSystemEnergyExportLifetimeResponse
import enlighten.monitoring.models.GetSystemEnergyExportTelemetryResponse
import enlighten.monitoring.models.GetSystemEnergyImportLifetimeResponse
import enlighten.monitoring.models.GetSystemEnergyImportTelemetryResponse
import enlighten.monitoring.models.GetSystems500Response
import enlighten.monitoring.models.MethodNotAllowedError
import enlighten.monitoring.models.NotImplementedError
import enlighten.monitoring.models.TelemetryGranularityEnum
import enlighten.monitoring.models.TooManyRequestsError

class SiteLevelConsumptionMonitoringApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of SiteLevelConsumptionMonitoringApi
        //val apiInstance = SiteLevelConsumptionMonitoringApi()

        // to test getSystemBatteryLifetime
        should("test getSystemBatteryLifetime") {
            // uncomment below to test getSystemBatteryLifetime
            //val systemId : kotlin.Int = 56 // kotlin.Int | Unique numeric ID of the system.
            //val startDate : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | Requested start date of the time series data. Defaults to the system's operational date. If the start_date is earlier than the system's operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format.
            //val endDate : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format.
            //val result : GetSystemBatteryLifetimeResponse = apiInstance.getSystemBatteryLifetime(systemId, startDate, endDate)
            //result shouldBe ("TODO")
        }

        // to test getSystemBatteryTelemetry
        should("test getSystemBatteryTelemetry") {
            // uncomment below to test getSystemBatteryTelemetry
            //val systemId : kotlin.Int = 56 // kotlin.Int | Unique numeric ID of the system.
            //val startAt : kotlin.Long = 789 // kotlin.Long | Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response.
            //val granularity : TelemetryGranularityEnum =  // TelemetryGranularityEnum | Granularity of the telemetry data. Default is 'day'.
            //val result : GetSystemBatteryTelemetryResponse = apiInstance.getSystemBatteryTelemetry(systemId, startAt, granularity)
            //result shouldBe ("TODO")
        }

        // to test getSystemConsumptionLifetime
        should("test getSystemConsumptionLifetime") {
            // uncomment below to test getSystemConsumptionLifetime
            //val systemId : kotlin.Int = 56 // kotlin.Int | Unique numeric ID of the system.
            //val startDate : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | Requested start date of the time series data. Defaults to the system's operational date. If the start_date is earlier than the system's operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format.
            //val endDate : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format.
            //val result : GetSystemConsumptionLifetimeResponse = apiInstance.getSystemConsumptionLifetime(systemId, startDate, endDate)
            //result shouldBe ("TODO")
        }

        // to test getSystemConsumptionMeterTelemetry
        should("test getSystemConsumptionMeterTelemetry") {
            // uncomment below to test getSystemConsumptionMeterTelemetry
            //val systemId : kotlin.Int = 56 // kotlin.Int | Unique numeric ID of the system.
            //val startAt : kotlin.Long = 789 // kotlin.Long | Requested start time for telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system's first reported date, then the system first reported date is considered as start_at. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response.
            //val granularity : TelemetryGranularityEnum =  // TelemetryGranularityEnum | Granularity of the telemetry data. Default is 'day'.
            //val result : GetSystemConsumptionMeterTelemetryResponse = apiInstance.getSystemConsumptionMeterTelemetry(systemId, startAt, granularity)
            //result shouldBe ("TODO")
        }

        // to test getSystemEnergyExportLifetime
        should("test getSystemEnergyExportLifetime") {
            // uncomment below to test getSystemEnergyExportLifetime
            //val systemId : kotlin.Int = 56 // kotlin.Int | Unique numeric ID of the system.
            //val startDate : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | Requested start date of the time series data. Defaults to the system's operational date. If the start_date is earlier than the system's operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format.
            //val endDate : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format.
            //val result : GetSystemEnergyExportLifetimeResponse = apiInstance.getSystemEnergyExportLifetime(systemId, startDate, endDate)
            //result shouldBe ("TODO")
        }

        // to test getSystemEnergyExportTelemetry
        should("test getSystemEnergyExportTelemetry") {
            // uncomment below to test getSystemEnergyExportTelemetry
            //val systemId : kotlin.Int = 56 // kotlin.Int | Unique numeric ID of the system.
            //val startAt : kotlin.Long = 789 // kotlin.Long | Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response.
            //val granularity : TelemetryGranularityEnum =  // TelemetryGranularityEnum | Granularity of the telemetry data. Default is 'day'.
            //val result : GetSystemEnergyExportTelemetryResponse = apiInstance.getSystemEnergyExportTelemetry(systemId, startAt, granularity)
            //result shouldBe ("TODO")
        }

        // to test getSystemEnergyImportLifetime
        should("test getSystemEnergyImportLifetime") {
            // uncomment below to test getSystemEnergyImportLifetime
            //val systemId : kotlin.Int = 56 // kotlin.Int | Unique numeric ID of the system.
            //val startDate : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | Requested start date of the time series data. Defaults to the system's operational date. If the start_date is earlier than the system's operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format.
            //val endDate : java.time.LocalDate = 2013-10-20 // java.time.LocalDate | End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format.
            //val result : GetSystemEnergyImportLifetimeResponse = apiInstance.getSystemEnergyImportLifetime(systemId, startDate, endDate)
            //result shouldBe ("TODO")
        }

        // to test getSystemEnergyImportTelemetry
        should("test getSystemEnergyImportTelemetry") {
            // uncomment below to test getSystemEnergyImportTelemetry
            //val systemId : kotlin.Int = 56 // kotlin.Int | Unique numeric ID of the system.
            //val startAt : kotlin.Long = 789 // kotlin.Long | Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response.
            //val granularity : TelemetryGranularityEnum =  // TelemetryGranularityEnum | Granularity of the telemetry data. Default is 'day'.
            //val result : GetSystemEnergyImportTelemetryResponse = apiInstance.getSystemEnergyImportTelemetry(systemId, startAt, granularity)
            //result shouldBe ("TODO")
        }

    }
}
