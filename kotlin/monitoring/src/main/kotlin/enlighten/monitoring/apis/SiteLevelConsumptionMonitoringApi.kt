/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package enlighten.monitoring.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import enlighten.monitoring.models.ClientError
import enlighten.monitoring.models.GetSystemBatteryLifetimeResponse
import enlighten.monitoring.models.GetSystemBatteryTelemetryResponse
import enlighten.monitoring.models.GetSystemConsumptionLifetimeResponse
import enlighten.monitoring.models.GetSystemConsumptionMeterTelemetryResponse
import enlighten.monitoring.models.GetSystemEnergyExportLifetimeResponse
import enlighten.monitoring.models.GetSystemEnergyExportTelemetryResponse
import enlighten.monitoring.models.GetSystemEnergyImportLifetimeResponse
import enlighten.monitoring.models.GetSystemEnergyImportTelemetryResponse
import enlighten.monitoring.models.GetSystems500Response
import enlighten.monitoring.models.MethodNotAllowedError
import enlighten.monitoring.models.NotImplementedError
import enlighten.monitoring.models.TelemetryGranularityEnum
import enlighten.monitoring.models.TooManyRequestsError

import com.squareup.moshi.Json

import enlighten.monitoring.infrastructure.ApiClient
import enlighten.monitoring.infrastructure.ApiResponse
import enlighten.monitoring.infrastructure.ClientException
import enlighten.monitoring.infrastructure.ClientError
import enlighten.monitoring.infrastructure.ServerException
import enlighten.monitoring.infrastructure.ServerError
import enlighten.monitoring.infrastructure.MultiValueMap
import enlighten.monitoring.infrastructure.PartConfig
import enlighten.monitoring.infrastructure.RequestConfig
import enlighten.monitoring.infrastructure.RequestMethod
import enlighten.monitoring.infrastructure.ResponseType
import enlighten.monitoring.infrastructure.Success
import enlighten.monitoring.infrastructure.toMultiValue

class SiteLevelConsumptionMonitoringApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.enphaseenergy.com/api/v4")
        }
    }

    /**
     * battery_lifetime
     * Returns a daily time series of energy charged into the batteries and energy discharged from the batteries for a system over its lifetime. All measurements are in Watt hours. The time series includes one entry for each day from the start_date to the end_date with no gaps in the time series. If the response includes trailing zeroes, such as [909, 4970, 0, 0, 0], then no energy has been charged/discharged for the last days in the series.
     * @param systemId Unique numeric ID of the system.
     * @param startDate Requested start date of the time series data. Defaults to the system&#39;s operational date. If the start_date is earlier than the system&#39;s operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format. (optional)
     * @param endDate End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format. (optional)
     * @return GetSystemBatteryLifetimeResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSystemBatteryLifetime(systemId: kotlin.Int, startDate: java.time.LocalDate? = null, endDate: java.time.LocalDate? = null) : GetSystemBatteryLifetimeResponse {
        val localVarResponse = getSystemBatteryLifetimeWithHttpInfo(systemId = systemId, startDate = startDate, endDate = endDate)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetSystemBatteryLifetimeResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * battery_lifetime
     * Returns a daily time series of energy charged into the batteries and energy discharged from the batteries for a system over its lifetime. All measurements are in Watt hours. The time series includes one entry for each day from the start_date to the end_date with no gaps in the time series. If the response includes trailing zeroes, such as [909, 4970, 0, 0, 0], then no energy has been charged/discharged for the last days in the series.
     * @param systemId Unique numeric ID of the system.
     * @param startDate Requested start date of the time series data. Defaults to the system&#39;s operational date. If the start_date is earlier than the system&#39;s operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format. (optional)
     * @param endDate End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format. (optional)
     * @return ApiResponse<GetSystemBatteryLifetimeResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSystemBatteryLifetimeWithHttpInfo(systemId: kotlin.Int, startDate: java.time.LocalDate?, endDate: java.time.LocalDate?) : ApiResponse<GetSystemBatteryLifetimeResponse?> {
        val localVariableConfig = getSystemBatteryLifetimeRequestConfig(systemId = systemId, startDate = startDate, endDate = endDate)

        return request<Unit, GetSystemBatteryLifetimeResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSystemBatteryLifetime
     *
     * @param systemId Unique numeric ID of the system.
     * @param startDate Requested start date of the time series data. Defaults to the system&#39;s operational date. If the start_date is earlier than the system&#39;s operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format. (optional)
     * @param endDate End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format. (optional)
     * @return RequestConfig
     */
    fun getSystemBatteryLifetimeRequestConfig(systemId: kotlin.Int, startDate: java.time.LocalDate?, endDate: java.time.LocalDate?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (startDate != null) {
                    put("start_date", listOf(parseDateToQueryString(startDate)))
                }
                if (endDate != null) {
                    put("end_date", listOf(parseDateToQueryString(endDate)))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/systems/{system_id}/battery_lifetime".replace("{"+"system_id"+"}", encodeURIComponent(systemId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieves telemetry for all batteries for a system
     * Retrieves telemetry for all the batteries of a system. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
     * @param systemId Unique numeric ID of the system.
     * @param startAt Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)
     * @param granularity Granularity of the telemetry data. Default is &#39;day&#39;. (optional)
     * @return GetSystemBatteryTelemetryResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSystemBatteryTelemetry(systemId: kotlin.Int, startAt: kotlin.Long? = null, granularity: TelemetryGranularityEnum? = null) : GetSystemBatteryTelemetryResponse {
        val localVarResponse = getSystemBatteryTelemetryWithHttpInfo(systemId = systemId, startAt = startAt, granularity = granularity)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetSystemBatteryTelemetryResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieves telemetry for all batteries for a system
     * Retrieves telemetry for all the batteries of a system. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
     * @param systemId Unique numeric ID of the system.
     * @param startAt Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)
     * @param granularity Granularity of the telemetry data. Default is &#39;day&#39;. (optional)
     * @return ApiResponse<GetSystemBatteryTelemetryResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSystemBatteryTelemetryWithHttpInfo(systemId: kotlin.Int, startAt: kotlin.Long?, granularity: TelemetryGranularityEnum?) : ApiResponse<GetSystemBatteryTelemetryResponse?> {
        val localVariableConfig = getSystemBatteryTelemetryRequestConfig(systemId = systemId, startAt = startAt, granularity = granularity)

        return request<Unit, GetSystemBatteryTelemetryResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSystemBatteryTelemetry
     *
     * @param systemId Unique numeric ID of the system.
     * @param startAt Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)
     * @param granularity Granularity of the telemetry data. Default is &#39;day&#39;. (optional)
     * @return RequestConfig
     */
    fun getSystemBatteryTelemetryRequestConfig(systemId: kotlin.Int, startAt: kotlin.Long?, granularity: TelemetryGranularityEnum?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (startAt != null) {
                    put("start_at", listOf(startAt.toString()))
                }
                if (granularity != null) {
                    put("granularity", listOf(granularity.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/systems/{system_id}/telemetry/battery".replace("{"+"system_id"+"}", encodeURIComponent(systemId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * consumption_lifetime
     * Returns a daily time series of energy consumption as measured by the consumption meter installed on the specified system. All measurements are in Watt hours. The time series includes one entry for each day from the start_date to the end_date. There are no gaps in the time series. If the response includes trailing zeroes, such as [909, 4970, 0, 0, 0], then no data has been reported for the last three days.
     * @param systemId Unique numeric ID of the system.
     * @param startDate Requested start date of the time series data. Defaults to the system&#39;s operational date. If the start_date is earlier than the system&#39;s operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format. (optional)
     * @param endDate End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format. (optional)
     * @return GetSystemConsumptionLifetimeResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSystemConsumptionLifetime(systemId: kotlin.Int, startDate: java.time.LocalDate? = null, endDate: java.time.LocalDate? = null) : GetSystemConsumptionLifetimeResponse {
        val localVarResponse = getSystemConsumptionLifetimeWithHttpInfo(systemId = systemId, startDate = startDate, endDate = endDate)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetSystemConsumptionLifetimeResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * consumption_lifetime
     * Returns a daily time series of energy consumption as measured by the consumption meter installed on the specified system. All measurements are in Watt hours. The time series includes one entry for each day from the start_date to the end_date. There are no gaps in the time series. If the response includes trailing zeroes, such as [909, 4970, 0, 0, 0], then no data has been reported for the last three days.
     * @param systemId Unique numeric ID of the system.
     * @param startDate Requested start date of the time series data. Defaults to the system&#39;s operational date. If the start_date is earlier than the system&#39;s operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format. (optional)
     * @param endDate End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format. (optional)
     * @return ApiResponse<GetSystemConsumptionLifetimeResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSystemConsumptionLifetimeWithHttpInfo(systemId: kotlin.Int, startDate: java.time.LocalDate?, endDate: java.time.LocalDate?) : ApiResponse<GetSystemConsumptionLifetimeResponse?> {
        val localVariableConfig = getSystemConsumptionLifetimeRequestConfig(systemId = systemId, startDate = startDate, endDate = endDate)

        return request<Unit, GetSystemConsumptionLifetimeResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSystemConsumptionLifetime
     *
     * @param systemId Unique numeric ID of the system.
     * @param startDate Requested start date of the time series data. Defaults to the system&#39;s operational date. If the start_date is earlier than the system&#39;s operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format. (optional)
     * @param endDate End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format. (optional)
     * @return RequestConfig
     */
    fun getSystemConsumptionLifetimeRequestConfig(systemId: kotlin.Int, startDate: java.time.LocalDate?, endDate: java.time.LocalDate?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (startDate != null) {
                    put("start_date", listOf(parseDateToQueryString(startDate)))
                }
                if (endDate != null) {
                    put("end_date", listOf(parseDateToQueryString(endDate)))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/systems/{system_id}/consumption_lifetime".replace("{"+"system_id"+"}", encodeURIComponent(systemId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieves telemetry for all consumption meters for a system
     * Retrieves telemetry for all the consumption meters of a system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
     * @param systemId Unique numeric ID of the system.
     * @param startAt Requested start time for telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then the system first reported date is considered as start_at. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)
     * @param granularity Granularity of the telemetry data. Default is &#39;day&#39;. (optional)
     * @return GetSystemConsumptionMeterTelemetryResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSystemConsumptionMeterTelemetry(systemId: kotlin.Int, startAt: kotlin.Long? = null, granularity: TelemetryGranularityEnum? = null) : GetSystemConsumptionMeterTelemetryResponse {
        val localVarResponse = getSystemConsumptionMeterTelemetryWithHttpInfo(systemId = systemId, startAt = startAt, granularity = granularity)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetSystemConsumptionMeterTelemetryResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieves telemetry for all consumption meters for a system
     * Retrieves telemetry for all the consumption meters of a system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 interval will appear in response. If granularity is day, maximum 96 intervals, and if granularity is week, maximum 672 intervals, will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. By default end_at will appear in response. If end_date parameter is passed in the url then end_date field will appear in response.
     * @param systemId Unique numeric ID of the system.
     * @param startAt Requested start time for telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then the system first reported date is considered as start_at. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)
     * @param granularity Granularity of the telemetry data. Default is &#39;day&#39;. (optional)
     * @return ApiResponse<GetSystemConsumptionMeterTelemetryResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSystemConsumptionMeterTelemetryWithHttpInfo(systemId: kotlin.Int, startAt: kotlin.Long?, granularity: TelemetryGranularityEnum?) : ApiResponse<GetSystemConsumptionMeterTelemetryResponse?> {
        val localVariableConfig = getSystemConsumptionMeterTelemetryRequestConfig(systemId = systemId, startAt = startAt, granularity = granularity)

        return request<Unit, GetSystemConsumptionMeterTelemetryResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSystemConsumptionMeterTelemetry
     *
     * @param systemId Unique numeric ID of the system.
     * @param startAt Requested start time for telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then the system first reported date is considered as start_at. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)
     * @param granularity Granularity of the telemetry data. Default is &#39;day&#39;. (optional)
     * @return RequestConfig
     */
    fun getSystemConsumptionMeterTelemetryRequestConfig(systemId: kotlin.Int, startAt: kotlin.Long?, granularity: TelemetryGranularityEnum?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (startAt != null) {
                    put("start_at", listOf(startAt.toString()))
                }
                if (granularity != null) {
                    put("granularity", listOf(granularity.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/systems/{system_id}/telemetry/consumption_meter".replace("{"+"system_id"+"}", encodeURIComponent(systemId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * export_lifetime
     * Returns a daily time series of energy exported to the grid by the system over its lifetime. All measurements are in Watt-hours. The time series includes one entry for each day from the start_date to the end_date with no gaps in the time series. If the response contains trailing zeroes, such as [909, 4970, 0, 0, 0], then no energy has been exported for the last days in the series.
     * @param systemId Unique numeric ID of the system.
     * @param startDate Requested start date of the time series data. Defaults to the system&#39;s operational date. If the start_date is earlier than the system&#39;s operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format. (optional)
     * @param endDate End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format. (optional)
     * @return GetSystemEnergyExportLifetimeResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSystemEnergyExportLifetime(systemId: kotlin.Int, startDate: java.time.LocalDate? = null, endDate: java.time.LocalDate? = null) : GetSystemEnergyExportLifetimeResponse {
        val localVarResponse = getSystemEnergyExportLifetimeWithHttpInfo(systemId = systemId, startDate = startDate, endDate = endDate)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetSystemEnergyExportLifetimeResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * export_lifetime
     * Returns a daily time series of energy exported to the grid by the system over its lifetime. All measurements are in Watt-hours. The time series includes one entry for each day from the start_date to the end_date with no gaps in the time series. If the response contains trailing zeroes, such as [909, 4970, 0, 0, 0], then no energy has been exported for the last days in the series.
     * @param systemId Unique numeric ID of the system.
     * @param startDate Requested start date of the time series data. Defaults to the system&#39;s operational date. If the start_date is earlier than the system&#39;s operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format. (optional)
     * @param endDate End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format. (optional)
     * @return ApiResponse<GetSystemEnergyExportLifetimeResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSystemEnergyExportLifetimeWithHttpInfo(systemId: kotlin.Int, startDate: java.time.LocalDate?, endDate: java.time.LocalDate?) : ApiResponse<GetSystemEnergyExportLifetimeResponse?> {
        val localVariableConfig = getSystemEnergyExportLifetimeRequestConfig(systemId = systemId, startDate = startDate, endDate = endDate)

        return request<Unit, GetSystemEnergyExportLifetimeResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSystemEnergyExportLifetime
     *
     * @param systemId Unique numeric ID of the system.
     * @param startDate Requested start date of the time series data. Defaults to the system&#39;s operational date. If the start_date is earlier than the system&#39;s operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format. (optional)
     * @param endDate End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format. (optional)
     * @return RequestConfig
     */
    fun getSystemEnergyExportLifetimeRequestConfig(systemId: kotlin.Int, startDate: java.time.LocalDate?, endDate: java.time.LocalDate?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (startDate != null) {
                    put("start_date", listOf(parseDateToQueryString(startDate)))
                }
                if (endDate != null) {
                    put("end_date", listOf(parseDateToQueryString(endDate)))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/systems/{system_id}/energy_export_lifetime".replace("{"+"system_id"+"}", encodeURIComponent(systemId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieves energy exported to grid in regular intervals
     * Retrieves energy exported to grid in regular intervals. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 intervals will appear in response. If granularity is day, maximum 96 intervals will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date.
     * @param systemId Unique numeric ID of the system.
     * @param startAt Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)
     * @param granularity Granularity of the telemetry data. Default is &#39;day&#39;. (optional)
     * @return GetSystemEnergyExportTelemetryResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSystemEnergyExportTelemetry(systemId: kotlin.Int, startAt: kotlin.Long? = null, granularity: TelemetryGranularityEnum? = null) : GetSystemEnergyExportTelemetryResponse {
        val localVarResponse = getSystemEnergyExportTelemetryWithHttpInfo(systemId = systemId, startAt = startAt, granularity = granularity)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetSystemEnergyExportTelemetryResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieves energy exported to grid in regular intervals
     * Retrieves energy exported to grid in regular intervals. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 intervals will appear in response. If granularity is day, maximum 96 intervals will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date.
     * @param systemId Unique numeric ID of the system.
     * @param startAt Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)
     * @param granularity Granularity of the telemetry data. Default is &#39;day&#39;. (optional)
     * @return ApiResponse<GetSystemEnergyExportTelemetryResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSystemEnergyExportTelemetryWithHttpInfo(systemId: kotlin.Int, startAt: kotlin.Long?, granularity: TelemetryGranularityEnum?) : ApiResponse<GetSystemEnergyExportTelemetryResponse?> {
        val localVariableConfig = getSystemEnergyExportTelemetryRequestConfig(systemId = systemId, startAt = startAt, granularity = granularity)

        return request<Unit, GetSystemEnergyExportTelemetryResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSystemEnergyExportTelemetry
     *
     * @param systemId Unique numeric ID of the system.
     * @param startAt Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)
     * @param granularity Granularity of the telemetry data. Default is &#39;day&#39;. (optional)
     * @return RequestConfig
     */
    fun getSystemEnergyExportTelemetryRequestConfig(systemId: kotlin.Int, startAt: kotlin.Long?, granularity: TelemetryGranularityEnum?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (startAt != null) {
                    put("start_at", listOf(startAt.toString()))
                }
                if (granularity != null) {
                    put("granularity", listOf(granularity.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/systems/{system_id}/energy_export_telemetry".replace("{"+"system_id"+"}", encodeURIComponent(systemId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * import_lifetime
     * Returns a daily time series of energy imported to the grid by the system over its lifetime. All measurements are in Watt hours. The time series includes one entry for each day from the start_date to the end_date with no gaps in the time series. If the response contains trailing zeroes, such as [909, 4970, 0, 0, 0], then no energy has been imported for the last days in the series.
     * @param systemId Unique numeric ID of the system.
     * @param startDate Requested start date of the time series data. Defaults to the system&#39;s operational date. If the start_date is earlier than the system&#39;s operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format. (optional)
     * @param endDate End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format. (optional)
     * @return GetSystemEnergyImportLifetimeResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSystemEnergyImportLifetime(systemId: kotlin.Int, startDate: java.time.LocalDate? = null, endDate: java.time.LocalDate? = null) : GetSystemEnergyImportLifetimeResponse {
        val localVarResponse = getSystemEnergyImportLifetimeWithHttpInfo(systemId = systemId, startDate = startDate, endDate = endDate)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetSystemEnergyImportLifetimeResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * import_lifetime
     * Returns a daily time series of energy imported to the grid by the system over its lifetime. All measurements are in Watt hours. The time series includes one entry for each day from the start_date to the end_date with no gaps in the time series. If the response contains trailing zeroes, such as [909, 4970, 0, 0, 0], then no energy has been imported for the last days in the series.
     * @param systemId Unique numeric ID of the system.
     * @param startDate Requested start date of the time series data. Defaults to the system&#39;s operational date. If the start_date is earlier than the system&#39;s operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format. (optional)
     * @param endDate End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format. (optional)
     * @return ApiResponse<GetSystemEnergyImportLifetimeResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSystemEnergyImportLifetimeWithHttpInfo(systemId: kotlin.Int, startDate: java.time.LocalDate?, endDate: java.time.LocalDate?) : ApiResponse<GetSystemEnergyImportLifetimeResponse?> {
        val localVariableConfig = getSystemEnergyImportLifetimeRequestConfig(systemId = systemId, startDate = startDate, endDate = endDate)

        return request<Unit, GetSystemEnergyImportLifetimeResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSystemEnergyImportLifetime
     *
     * @param systemId Unique numeric ID of the system.
     * @param startDate Requested start date of the time series data. Defaults to the system&#39;s operational date. If the start_date is earlier than the system&#39;s operational_date, then the response data begins with the system operational_date as start_date. Pass as string in YYYY-MM-DD format. (optional)
     * @param endDate End date of the time series data. Defaults to yesterday. If the end_date is later than yesterday, then the response data ends with yesterday as end_date. Pass as string in YYYY-MM-DD format. (optional)
     * @return RequestConfig
     */
    fun getSystemEnergyImportLifetimeRequestConfig(systemId: kotlin.Int, startDate: java.time.LocalDate?, endDate: java.time.LocalDate?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (startDate != null) {
                    put("start_date", listOf(parseDateToQueryString(startDate)))
                }
                if (endDate != null) {
                    put("end_date", listOf(parseDateToQueryString(endDate)))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/systems/{system_id}/energy_import_lifetime".replace("{"+"system_id"+"}", encodeURIComponent(systemId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieves energy imported from grid in regular intervals
     * Retrieves energy imported from grid in regular intervals. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 intervals will appear in response. If granularity is day, maximum 96 intervals will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date.
     * @param systemId Unique numeric ID of the system.
     * @param startAt Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)
     * @param granularity Granularity of the telemetry data. Default is &#39;day&#39;. (optional)
     * @return GetSystemEnergyImportTelemetryResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSystemEnergyImportTelemetry(systemId: kotlin.Int, startAt: kotlin.Long? = null, granularity: TelemetryGranularityEnum? = null) : GetSystemEnergyImportTelemetryResponse {
        val localVarResponse = getSystemEnergyImportTelemetryWithHttpInfo(systemId = systemId, startAt = startAt, granularity = granularity)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetSystemEnergyImportTelemetryResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieves energy imported from grid in regular intervals
     * Retrieves energy imported from grid in regular intervals. If no start_at is specified, defaults to midnight today, in the timezone of the system. If the start_at specified is earlier than the system&#39;s first reported date, then midnight of the system&#39;s first reported date is considered as start_at. The end_at is calculated as the minimum of the time of the request and (start time + granularity). The meaning of granularity is as follows:  If granularity is 15mins, maximum 1 intervals will appear in response. If granularity is day, maximum 96 intervals will appear in response where each interval is of 15 mins duration.  The requested start date must be within 2 years from current date.
     * @param systemId Unique numeric ID of the system.
     * @param startAt Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)
     * @param granularity Granularity of the telemetry data. Default is &#39;day&#39;. (optional)
     * @return ApiResponse<GetSystemEnergyImportTelemetryResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSystemEnergyImportTelemetryWithHttpInfo(systemId: kotlin.Int, startAt: kotlin.Long?, granularity: TelemetryGranularityEnum?) : ApiResponse<GetSystemEnergyImportTelemetryResponse?> {
        val localVariableConfig = getSystemEnergyImportTelemetryRequestConfig(systemId = systemId, startAt = startAt, granularity = granularity)

        return request<Unit, GetSystemEnergyImportTelemetryResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSystemEnergyImportTelemetry
     *
     * @param systemId Unique numeric ID of the system.
     * @param startAt Start time for fetching the telemetry data in Epoch time format. Alternatively one can use start_date in place of start_at for passing the start date as string in YYYY-MM-DD format. By default start_at will appear in response. If start_date parameter is passed in the url then start_date field will appear in response. (optional)
     * @param granularity Granularity of the telemetry data. Default is &#39;day&#39;. (optional)
     * @return RequestConfig
     */
    fun getSystemEnergyImportTelemetryRequestConfig(systemId: kotlin.Int, startAt: kotlin.Long?, granularity: TelemetryGranularityEnum?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (startAt != null) {
                    put("start_at", listOf(startAt.toString()))
                }
                if (granularity != null) {
                    put("granularity", listOf(granularity.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/systems/{system_id}/energy_import_telemetry".replace("{"+"system_id"+"}", encodeURIComponent(systemId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
