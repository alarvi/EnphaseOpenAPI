/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package enlighten.monitoring.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import enlighten.monitoring.models.StreamSystemLiveDataError
import enlighten.monitoring.models.StreamSystemLiveDataResponse

import com.squareup.moshi.Json

import enlighten.monitoring.infrastructure.ApiClient
import enlighten.monitoring.infrastructure.ApiResponse
import enlighten.monitoring.infrastructure.ClientException
import enlighten.monitoring.infrastructure.ClientError
import enlighten.monitoring.infrastructure.ServerException
import enlighten.monitoring.infrastructure.ServerError
import enlighten.monitoring.infrastructure.MultiValueMap
import enlighten.monitoring.infrastructure.PartConfig
import enlighten.monitoring.infrastructure.RequestConfig
import enlighten.monitoring.infrastructure.RequestMethod
import enlighten.monitoring.infrastructure.ResponseType
import enlighten.monitoring.infrastructure.Success
import enlighten.monitoring.infrastructure.toMultiValue

class StreamingApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.enphaseenergy.com/api/v4")
        }
    }

    /**
     * Site Level Live Status
     * API users can get real time live status data on demand for a given system. User can retrieve real time power for PV Production, Grid Import/Export, Consumption, Battery Charge/Discharge, and Generator. Users can also retrieve Grid Status, Battery Mode, and Battery State of Charge. User will receive the stream for a duration of 30 seconds by default and can configure the time in seconds by passing &#39;duration&#39; as a header parameter with a minimum value of 30 and maximum value of 300.
     * @param systemId Unique numeric ID of the system.
     * @param duration Duration of the stream in seconds. Default&#x3D;30, Min&#x3D;30, Max&#x3D;300, e.g&#x3D;30. (optional)
     * @return StreamSystemLiveDataResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun streamSystemLiveData(systemId: kotlin.Int, duration: kotlin.Int? = null) : StreamSystemLiveDataResponse {
        val localVarResponse = streamSystemLiveDataWithHttpInfo(systemId = systemId, duration = duration)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as StreamSystemLiveDataResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Site Level Live Status
     * API users can get real time live status data on demand for a given system. User can retrieve real time power for PV Production, Grid Import/Export, Consumption, Battery Charge/Discharge, and Generator. Users can also retrieve Grid Status, Battery Mode, and Battery State of Charge. User will receive the stream for a duration of 30 seconds by default and can configure the time in seconds by passing &#39;duration&#39; as a header parameter with a minimum value of 30 and maximum value of 300.
     * @param systemId Unique numeric ID of the system.
     * @param duration Duration of the stream in seconds. Default&#x3D;30, Min&#x3D;30, Max&#x3D;300, e.g&#x3D;30. (optional)
     * @return ApiResponse<StreamSystemLiveDataResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun streamSystemLiveDataWithHttpInfo(systemId: kotlin.Int, duration: kotlin.Int?) : ApiResponse<StreamSystemLiveDataResponse?> {
        val localVariableConfig = streamSystemLiveDataRequestConfig(systemId = systemId, duration = duration)

        return request<Unit, StreamSystemLiveDataResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation streamSystemLiveData
     *
     * @param systemId Unique numeric ID of the system.
     * @param duration Duration of the stream in seconds. Default&#x3D;30, Min&#x3D;30, Max&#x3D;300, e.g&#x3D;30. (optional)
     * @return RequestConfig
     */
    fun streamSystemLiveDataRequestConfig(systemId: kotlin.Int, duration: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        duration?.apply { localVariableHeaders["duration"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/systems/{system_id}/live_data".replace("{"+"system_id"+"}", encodeURIComponent(systemId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
