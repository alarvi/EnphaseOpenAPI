/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package enlighten.monitoring.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import enlighten.monitoring.models.BatterySettings
import enlighten.monitoring.models.ClientError
import enlighten.monitoring.models.GetSystemGridStatusSettingsResponse
import enlighten.monitoring.models.GetSystems500Response
import enlighten.monitoring.models.LoadControlSettings
import enlighten.monitoring.models.MethodNotAllowedError
import enlighten.monitoring.models.NotImplementedError
import enlighten.monitoring.models.StormGuardSettings
import enlighten.monitoring.models.TooManyRequestsError
import enlighten.monitoring.models.UpdateSystemBatterySettingsRequest
import enlighten.monitoring.models.UpdateSystemLoadControlSettingsRequest
import enlighten.monitoring.models.UpdateSystemStormGuardSettingsRequest

import com.squareup.moshi.Json

import enlighten.monitoring.infrastructure.ApiClient
import enlighten.monitoring.infrastructure.ApiResponse
import enlighten.monitoring.infrastructure.ClientException
import enlighten.monitoring.infrastructure.ClientError
import enlighten.monitoring.infrastructure.ServerException
import enlighten.monitoring.infrastructure.ServerError
import enlighten.monitoring.infrastructure.MultiValueMap
import enlighten.monitoring.infrastructure.PartConfig
import enlighten.monitoring.infrastructure.RequestConfig
import enlighten.monitoring.infrastructure.RequestMethod
import enlighten.monitoring.infrastructure.ResponseType
import enlighten.monitoring.infrastructure.Success
import enlighten.monitoring.infrastructure.toMultiValue

class SystemConfigurationsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.enphaseenergy.com/api/v4")
        }
    }

    /**
     * Returns the current battery settings of a system
     * Returns the current battery settings of a system.
     * @param systemId Unique numeric ID of the system.
     * @return BatterySettings
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSystemBatterySettings(systemId: kotlin.Int) : BatterySettings {
        val localVarResponse = getSystemBatterySettingsWithHttpInfo(systemId = systemId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BatterySettings
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Returns the current battery settings of a system
     * Returns the current battery settings of a system.
     * @param systemId Unique numeric ID of the system.
     * @return ApiResponse<BatterySettings?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSystemBatterySettingsWithHttpInfo(systemId: kotlin.Int) : ApiResponse<BatterySettings?> {
        val localVariableConfig = getSystemBatterySettingsRequestConfig(systemId = systemId)

        return request<Unit, BatterySettings>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSystemBatterySettings
     *
     * @param systemId Unique numeric ID of the system.
     * @return RequestConfig
     */
    fun getSystemBatterySettingsRequestConfig(systemId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/systems/config/{system_id}/battery_settings".replace("{"+"system_id"+"}", encodeURIComponent(systemId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Returns the current grid status of a system.
     * Returns the current grid status of a system. Please note that the status returned in the response is not real-time and is updated only after the IQ Gateway sends a new report to the Enphase cloud.
     * @param systemId Unique numeric ID of the system.
     * @return GetSystemGridStatusSettingsResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSystemGridStatusSettings(systemId: kotlin.Int) : GetSystemGridStatusSettingsResponse {
        val localVarResponse = getSystemGridStatusSettingsWithHttpInfo(systemId = systemId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetSystemGridStatusSettingsResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Returns the current grid status of a system.
     * Returns the current grid status of a system. Please note that the status returned in the response is not real-time and is updated only after the IQ Gateway sends a new report to the Enphase cloud.
     * @param systemId Unique numeric ID of the system.
     * @return ApiResponse<GetSystemGridStatusSettingsResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSystemGridStatusSettingsWithHttpInfo(systemId: kotlin.Int) : ApiResponse<GetSystemGridStatusSettingsResponse?> {
        val localVariableConfig = getSystemGridStatusSettingsRequestConfig(systemId = systemId)

        return request<Unit, GetSystemGridStatusSettingsResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSystemGridStatusSettings
     *
     * @param systemId Unique numeric ID of the system.
     * @return RequestConfig
     */
    fun getSystemGridStatusSettingsRequestConfig(systemId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/systems/config/{system_id}/grid_status".replace("{"+"system_id"+"}", encodeURIComponent(systemId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Returns the current load control settings of a system
     * Returns the current load control settings of a system.
     * @param systemId Unique numeric ID of the system.
     * @return LoadControlSettings
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSystemLoadControlSettings(systemId: kotlin.Int) : LoadControlSettings {
        val localVarResponse = getSystemLoadControlSettingsWithHttpInfo(systemId = systemId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as LoadControlSettings
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Returns the current load control settings of a system
     * Returns the current load control settings of a system.
     * @param systemId Unique numeric ID of the system.
     * @return ApiResponse<LoadControlSettings?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSystemLoadControlSettingsWithHttpInfo(systemId: kotlin.Int) : ApiResponse<LoadControlSettings?> {
        val localVariableConfig = getSystemLoadControlSettingsRequestConfig(systemId = systemId)

        return request<Unit, LoadControlSettings>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSystemLoadControlSettings
     *
     * @param systemId Unique numeric ID of the system.
     * @return RequestConfig
     */
    fun getSystemLoadControlSettingsRequestConfig(systemId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/systems/config/{system_id}/load_control".replace("{"+"system_id"+"}", encodeURIComponent(systemId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Returns the current storm guard settings of a system
     * Returns the current storm guard settings of a system.
     * @param systemId Unique numeric ID of the system.
     * @return StormGuardSettings
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSystemStormGuardSettings(systemId: kotlin.Int) : StormGuardSettings {
        val localVarResponse = getSystemStormGuardSettingsWithHttpInfo(systemId = systemId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as StormGuardSettings
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Returns the current storm guard settings of a system
     * Returns the current storm guard settings of a system.
     * @param systemId Unique numeric ID of the system.
     * @return ApiResponse<StormGuardSettings?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSystemStormGuardSettingsWithHttpInfo(systemId: kotlin.Int) : ApiResponse<StormGuardSettings?> {
        val localVariableConfig = getSystemStormGuardSettingsRequestConfig(systemId = systemId)

        return request<Unit, StormGuardSettings>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSystemStormGuardSettings
     *
     * @param systemId Unique numeric ID of the system.
     * @return RequestConfig
     */
    fun getSystemStormGuardSettingsRequestConfig(systemId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/systems/config/{system_id}/storm_guard".replace("{"+"system_id"+"}", encodeURIComponent(systemId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Updates the current battery settings of a system
     * Updates the current battery settings of a system.
     * @param systemId Unique numeric ID of the system.
     * @param batterySettings  (optional)
     * @return BatterySettings
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateSystemBatterySettings(systemId: kotlin.Int, batterySettings: UpdateSystemBatterySettingsRequest? = null) : BatterySettings {
        val localVarResponse = updateSystemBatterySettingsWithHttpInfo(systemId = systemId, batterySettings = batterySettings)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as BatterySettings
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Updates the current battery settings of a system
     * Updates the current battery settings of a system.
     * @param systemId Unique numeric ID of the system.
     * @param batterySettings  (optional)
     * @return ApiResponse<BatterySettings?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateSystemBatterySettingsWithHttpInfo(systemId: kotlin.Int, batterySettings: UpdateSystemBatterySettingsRequest?) : ApiResponse<BatterySettings?> {
        val localVariableConfig = updateSystemBatterySettingsRequestConfig(systemId = systemId, batterySettings = batterySettings)

        return request<UpdateSystemBatterySettingsRequest, BatterySettings>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateSystemBatterySettings
     *
     * @param systemId Unique numeric ID of the system.
     * @param batterySettings  (optional)
     * @return RequestConfig
     */
    fun updateSystemBatterySettingsRequestConfig(systemId: kotlin.Int, batterySettings: UpdateSystemBatterySettingsRequest?) : RequestConfig<UpdateSystemBatterySettingsRequest> {
        val localVariableBody = batterySettings
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/systems/config/{system_id}/battery_settings".replace("{"+"system_id"+"}", encodeURIComponent(systemId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Updates the current load control settings of a system
     * Updates the current load control settings of a system.
     * @param systemId Unique numeric ID of the system.
     * @param updateSystemLoadControlSettingsRequest  (optional)
     * @return LoadControlSettings
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateSystemLoadControlSettings(systemId: kotlin.Int, updateSystemLoadControlSettingsRequest: UpdateSystemLoadControlSettingsRequest? = null) : LoadControlSettings {
        val localVarResponse = updateSystemLoadControlSettingsWithHttpInfo(systemId = systemId, updateSystemLoadControlSettingsRequest = updateSystemLoadControlSettingsRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as LoadControlSettings
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Updates the current load control settings of a system
     * Updates the current load control settings of a system.
     * @param systemId Unique numeric ID of the system.
     * @param updateSystemLoadControlSettingsRequest  (optional)
     * @return ApiResponse<LoadControlSettings?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateSystemLoadControlSettingsWithHttpInfo(systemId: kotlin.Int, updateSystemLoadControlSettingsRequest: UpdateSystemLoadControlSettingsRequest?) : ApiResponse<LoadControlSettings?> {
        val localVariableConfig = updateSystemLoadControlSettingsRequestConfig(systemId = systemId, updateSystemLoadControlSettingsRequest = updateSystemLoadControlSettingsRequest)

        return request<UpdateSystemLoadControlSettingsRequest, LoadControlSettings>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateSystemLoadControlSettings
     *
     * @param systemId Unique numeric ID of the system.
     * @param updateSystemLoadControlSettingsRequest  (optional)
     * @return RequestConfig
     */
    fun updateSystemLoadControlSettingsRequestConfig(systemId: kotlin.Int, updateSystemLoadControlSettingsRequest: UpdateSystemLoadControlSettingsRequest?) : RequestConfig<UpdateSystemLoadControlSettingsRequest> {
        val localVariableBody = updateSystemLoadControlSettingsRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/systems/config/{system_id}/load_control".replace("{"+"system_id"+"}", encodeURIComponent(systemId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Updates the current storm guard settings of a system
     * Updates the current storm guard status of a system.
     * @param systemId Unique numeric ID of the system.
     * @param stormGuard  (optional)
     * @return StormGuardSettings
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateSystemStormGuardSettings(systemId: kotlin.Int, stormGuard: UpdateSystemStormGuardSettingsRequest? = null) : StormGuardSettings {
        val localVarResponse = updateSystemStormGuardSettingsWithHttpInfo(systemId = systemId, stormGuard = stormGuard)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as StormGuardSettings
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Updates the current storm guard settings of a system
     * Updates the current storm guard status of a system.
     * @param systemId Unique numeric ID of the system.
     * @param stormGuard  (optional)
     * @return ApiResponse<StormGuardSettings?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateSystemStormGuardSettingsWithHttpInfo(systemId: kotlin.Int, stormGuard: UpdateSystemStormGuardSettingsRequest?) : ApiResponse<StormGuardSettings?> {
        val localVariableConfig = updateSystemStormGuardSettingsRequestConfig(systemId = systemId, stormGuard = stormGuard)

        return request<UpdateSystemStormGuardSettingsRequest, StormGuardSettings>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateSystemStormGuardSettings
     *
     * @param systemId Unique numeric ID of the system.
     * @param stormGuard  (optional)
     * @return RequestConfig
     */
    fun updateSystemStormGuardSettingsRequestConfig(systemId: kotlin.Int, stormGuard: UpdateSystemStormGuardSettingsRequest?) : RequestConfig<UpdateSystemStormGuardSettingsRequest> {
        val localVariableBody = stormGuard
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/systems/config/{system_id}/storm_guard".replace("{"+"system_id"+"}", encodeURIComponent(systemId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
