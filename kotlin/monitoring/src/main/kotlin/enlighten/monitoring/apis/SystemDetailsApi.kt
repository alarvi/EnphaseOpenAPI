/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package enlighten.monitoring.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import enlighten.monitoring.models.ClientError
import enlighten.monitoring.models.GetInvertersSummaryByEnvoyOrSiteResponseInner
import enlighten.monitoring.models.GetSystemDevicesResponse
import enlighten.monitoring.models.GetSystemSummaryResponse
import enlighten.monitoring.models.GetSystems500Response
import enlighten.monitoring.models.GetSystemsResponse
import enlighten.monitoring.models.MethodNotAllowedError
import enlighten.monitoring.models.NotImplementedError
import enlighten.monitoring.models.RetrieveSystemIdResponse
import enlighten.monitoring.models.SearchSystemsRequest
import enlighten.monitoring.models.SearchSystemsResponse
import enlighten.monitoring.models.SystemDetails
import enlighten.monitoring.models.SystemSortByEnum
import enlighten.monitoring.models.TooManyRequestsError

import com.squareup.moshi.Json

import enlighten.monitoring.infrastructure.ApiClient
import enlighten.monitoring.infrastructure.ApiResponse
import enlighten.monitoring.infrastructure.ClientException
import enlighten.monitoring.infrastructure.ClientError
import enlighten.monitoring.infrastructure.ServerException
import enlighten.monitoring.infrastructure.ServerError
import enlighten.monitoring.infrastructure.MultiValueMap
import enlighten.monitoring.infrastructure.PartConfig
import enlighten.monitoring.infrastructure.RequestConfig
import enlighten.monitoring.infrastructure.RequestMethod
import enlighten.monitoring.infrastructure.ResponseType
import enlighten.monitoring.infrastructure.Success
import enlighten.monitoring.infrastructure.toMultiValue

class SystemDetailsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.enphaseenergy.com/api/v4")
        }
    }

    /**
     * inverters_summary_by_envoy_or_site
     * Returns the microinverters summary based on the specified active envoy serial number or system.
     * @param siteId Site ID. The response will contain only those microinverters reporting to one of the active envoys of the given site. (optional)
     * @param envoySerialNumber Active envoy serial number. Only microinverters reporting to the given active envoy will be present in the response. (optional)
     * @return kotlin.collections.List<GetInvertersSummaryByEnvoyOrSiteResponseInner>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getInvertersSummaryByEnvoyOrSite(siteId: kotlin.Int? = null, envoySerialNumber: kotlin.String? = null) : kotlin.collections.List<GetInvertersSummaryByEnvoyOrSiteResponseInner> {
        val localVarResponse = getInvertersSummaryByEnvoyOrSiteWithHttpInfo(siteId = siteId, envoySerialNumber = envoySerialNumber)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<GetInvertersSummaryByEnvoyOrSiteResponseInner>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * inverters_summary_by_envoy_or_site
     * Returns the microinverters summary based on the specified active envoy serial number or system.
     * @param siteId Site ID. The response will contain only those microinverters reporting to one of the active envoys of the given site. (optional)
     * @param envoySerialNumber Active envoy serial number. Only microinverters reporting to the given active envoy will be present in the response. (optional)
     * @return ApiResponse<kotlin.collections.List<GetInvertersSummaryByEnvoyOrSiteResponseInner>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getInvertersSummaryByEnvoyOrSiteWithHttpInfo(siteId: kotlin.Int?, envoySerialNumber: kotlin.String?) : ApiResponse<kotlin.collections.List<GetInvertersSummaryByEnvoyOrSiteResponseInner>?> {
        val localVariableConfig = getInvertersSummaryByEnvoyOrSiteRequestConfig(siteId = siteId, envoySerialNumber = envoySerialNumber)

        return request<Unit, kotlin.collections.List<GetInvertersSummaryByEnvoyOrSiteResponseInner>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getInvertersSummaryByEnvoyOrSite
     *
     * @param siteId Site ID. The response will contain only those microinverters reporting to one of the active envoys of the given site. (optional)
     * @param envoySerialNumber Active envoy serial number. Only microinverters reporting to the given active envoy will be present in the response. (optional)
     * @return RequestConfig
     */
    fun getInvertersSummaryByEnvoyOrSiteRequestConfig(siteId: kotlin.Int?, envoySerialNumber: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (siteId != null) {
                    put("site_id", listOf(siteId.toString()))
                }
                if (envoySerialNumber != null) {
                    put("envoy_serial_number", listOf(envoySerialNumber.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/systems/inverters_summary_by_envoy_or_site",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieves a System by ID
     * Retrieves a system by ID.
     * @param systemId Unique numeric ID of the system.
     * @return SystemDetails
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSystem(systemId: kotlin.Int) : SystemDetails {
        val localVarResponse = getSystemWithHttpInfo(systemId = systemId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SystemDetails
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieves a System by ID
     * Retrieves a system by ID.
     * @param systemId Unique numeric ID of the system.
     * @return ApiResponse<SystemDetails?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSystemWithHttpInfo(systemId: kotlin.Int) : ApiResponse<SystemDetails?> {
        val localVariableConfig = getSystemRequestConfig(systemId = systemId)

        return request<Unit, SystemDetails>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSystem
     *
     * @param systemId Unique numeric ID of the system.
     * @return RequestConfig
     */
    fun getSystemRequestConfig(systemId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/systems/{system_id}".replace("{"+"system_id"+"}", encodeURIComponent(systemId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieves devices for a given system
     * Retrieves devices for a given system. Only devices that are active will be returned in the response.
     * @param systemId Unique numeric ID of the system.
     * @return GetSystemDevicesResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSystemDevices(systemId: kotlin.Int) : GetSystemDevicesResponse {
        val localVarResponse = getSystemDevicesWithHttpInfo(systemId = systemId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetSystemDevicesResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieves devices for a given system
     * Retrieves devices for a given system. Only devices that are active will be returned in the response.
     * @param systemId Unique numeric ID of the system.
     * @return ApiResponse<GetSystemDevicesResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSystemDevicesWithHttpInfo(systemId: kotlin.Int) : ApiResponse<GetSystemDevicesResponse?> {
        val localVariableConfig = getSystemDevicesRequestConfig(systemId = systemId)

        return request<Unit, GetSystemDevicesResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSystemDevices
     *
     * @param systemId Unique numeric ID of the system.
     * @return RequestConfig
     */
    fun getSystemDevicesRequestConfig(systemId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/systems/{system_id}/devices".replace("{"+"system_id"+"}", encodeURIComponent(systemId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieves a system summary
     * Returns system summary based on the specified system ID.
     * @param systemId Unique numeric ID of the system.
     * @return GetSystemSummaryResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSystemSummary(systemId: kotlin.Int) : GetSystemSummaryResponse {
        val localVarResponse = getSystemSummaryWithHttpInfo(systemId = systemId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetSystemSummaryResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieves a system summary
     * Returns system summary based on the specified system ID.
     * @param systemId Unique numeric ID of the system.
     * @return ApiResponse<GetSystemSummaryResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSystemSummaryWithHttpInfo(systemId: kotlin.Int) : ApiResponse<GetSystemSummaryResponse?> {
        val localVariableConfig = getSystemSummaryRequestConfig(systemId = systemId)

        return request<Unit, GetSystemSummaryResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSystemSummary
     *
     * @param systemId Unique numeric ID of the system.
     * @return RequestConfig
     */
    fun getSystemSummaryRequestConfig(systemId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/systems/{system_id}/summary".replace("{"+"system_id"+"}", encodeURIComponent(systemId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Fetch systems
     * Returns a list of systems for which the user can make API requests. By default, systems are returned in batches of 10. The maximum size is 100.
     * @param page Page to be returned. Default&#x3D;1, Min&#x3D;1. For example, if page is set to 2, 2nd page is returned. (optional)
     * @param size Maximum number of records shown per page. Default&#x3D;10, Min&#x3D;1, Max&#x3D;100.  For example, if set to 5, 5 records are shown per page. (optional)
     * @param sortBy Returns list of systems sorted by &lt;sort_by&gt; field. To get ASC order sorted list, user sort_by &#x3D; &lt;key&gt;. To get DESC order sorted list, use sort_by &#x3D; (-)&lt;key&gt;. Current sort keys supported are id, name, and last_report_date. By default the list is sorted by decreasing system ID. (optional)
     * @return GetSystemsResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSystems(page: kotlin.Int? = null, size: kotlin.Int? = null, sortBy: SystemSortByEnum? = null) : GetSystemsResponse {
        val localVarResponse = getSystemsWithHttpInfo(page = page, size = size, sortBy = sortBy)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetSystemsResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Fetch systems
     * Returns a list of systems for which the user can make API requests. By default, systems are returned in batches of 10. The maximum size is 100.
     * @param page Page to be returned. Default&#x3D;1, Min&#x3D;1. For example, if page is set to 2, 2nd page is returned. (optional)
     * @param size Maximum number of records shown per page. Default&#x3D;10, Min&#x3D;1, Max&#x3D;100.  For example, if set to 5, 5 records are shown per page. (optional)
     * @param sortBy Returns list of systems sorted by &lt;sort_by&gt; field. To get ASC order sorted list, user sort_by &#x3D; &lt;key&gt;. To get DESC order sorted list, use sort_by &#x3D; (-)&lt;key&gt;. Current sort keys supported are id, name, and last_report_date. By default the list is sorted by decreasing system ID. (optional)
     * @return ApiResponse<GetSystemsResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSystemsWithHttpInfo(page: kotlin.Int?, size: kotlin.Int?, sortBy: SystemSortByEnum?) : ApiResponse<GetSystemsResponse?> {
        val localVariableConfig = getSystemsRequestConfig(page = page, size = size, sortBy = sortBy)

        return request<Unit, GetSystemsResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSystems
     *
     * @param page Page to be returned. Default&#x3D;1, Min&#x3D;1. For example, if page is set to 2, 2nd page is returned. (optional)
     * @param size Maximum number of records shown per page. Default&#x3D;10, Min&#x3D;1, Max&#x3D;100.  For example, if set to 5, 5 records are shown per page. (optional)
     * @param sortBy Returns list of systems sorted by &lt;sort_by&gt; field. To get ASC order sorted list, user sort_by &#x3D; &lt;key&gt;. To get DESC order sorted list, use sort_by &#x3D; (-)&lt;key&gt;. Current sort keys supported are id, name, and last_report_date. By default the list is sorted by decreasing system ID. (optional)
     * @return RequestConfig
     */
    fun getSystemsRequestConfig(page: kotlin.Int?, size: kotlin.Int?, sortBy: SystemSortByEnum?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
                if (sortBy != null) {
                    put("sort_by", listOf(sortBy.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/systems",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve system for a given envoy serial number
     * Get system ID by passing envoy serial number. If the serial number of a retired envoy is passed in the request param, a 404 Not Found response will be returned.
     * @param serialNum Envoy serial number.
     * @return RetrieveSystemIdResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun retrieveSystemId(serialNum: kotlin.String) : RetrieveSystemIdResponse {
        val localVarResponse = retrieveSystemIdWithHttpInfo(serialNum = serialNum)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RetrieveSystemIdResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve system for a given envoy serial number
     * Get system ID by passing envoy serial number. If the serial number of a retired envoy is passed in the request param, a 404 Not Found response will be returned.
     * @param serialNum Envoy serial number.
     * @return ApiResponse<RetrieveSystemIdResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun retrieveSystemIdWithHttpInfo(serialNum: kotlin.String) : ApiResponse<RetrieveSystemIdResponse?> {
        val localVariableConfig = retrieveSystemIdRequestConfig(serialNum = serialNum)

        return request<Unit, RetrieveSystemIdResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation retrieveSystemId
     *
     * @param serialNum Envoy serial number.
     * @return RequestConfig
     */
    fun retrieveSystemIdRequestConfig(serialNum: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("serial_num", listOf(serialNum.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/systems/retrieve_system_id",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Search and filter systems
     * Search and filter systems. Provide only valid values in request parameters. Empty and invalid values will be ignored. Invalid keys will be rejected.
     * @param page Page to be returned. Default&#x3D;1, Min&#x3D;1, e.g&#x3D;2. (optional)
     * @param size Maximum number of records shown per page. Default&#x3D;10, Min&#x3D;1, Max&#x3D;1000, e.g&#x3D;5. (optional)
     * @param params  (optional)
     * @return SearchSystemsResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchSystems(page: kotlin.Int? = null, size: kotlin.Int? = null, params: SearchSystemsRequest? = null) : SearchSystemsResponse {
        val localVarResponse = searchSystemsWithHttpInfo(page = page, size = size, params = params)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SearchSystemsResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Search and filter systems
     * Search and filter systems. Provide only valid values in request parameters. Empty and invalid values will be ignored. Invalid keys will be rejected.
     * @param page Page to be returned. Default&#x3D;1, Min&#x3D;1, e.g&#x3D;2. (optional)
     * @param size Maximum number of records shown per page. Default&#x3D;10, Min&#x3D;1, Max&#x3D;1000, e.g&#x3D;5. (optional)
     * @param params  (optional)
     * @return ApiResponse<SearchSystemsResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchSystemsWithHttpInfo(page: kotlin.Int?, size: kotlin.Int?, params: SearchSystemsRequest?) : ApiResponse<SearchSystemsResponse?> {
        val localVariableConfig = searchSystemsRequestConfig(page = page, size = size, params = params)

        return request<SearchSystemsRequest, SearchSystemsResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation searchSystems
     *
     * @param page Page to be returned. Default&#x3D;1, Min&#x3D;1, e.g&#x3D;2. (optional)
     * @param size Maximum number of records shown per page. Default&#x3D;10, Min&#x3D;1, Max&#x3D;1000, e.g&#x3D;5. (optional)
     * @param params  (optional)
     * @return RequestConfig
     */
    fun searchSystemsRequestConfig(page: kotlin.Int?, size: kotlin.Int?, params: SearchSystemsRequest?) : RequestConfig<SearchSystemsRequest> {
        val localVariableBody = params
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/systems/search",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
