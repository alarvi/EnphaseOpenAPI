/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package enlighten.monitoring.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * Values: deactivated,normal,comm,micro,power,meter,meter_issue,battery,storage_idle,encharge,encharge_issue,enpower,enpower_issue,retired,not_monitored,unused,disabled,debug,info,monitored,muted,warning,error,no_data,rma,unknown,nsr,any,data_upload,on_grid,off_grid,grid_unknown
 */

@JsonClass(generateAdapter = false)
enum class SystemStatusEnum(val value: kotlin.String) {

    @Json(name = "deactivated")
    deactivated("deactivated"),

    @Json(name = "normal")
    normal("normal"),

    @Json(name = "comm")
    comm("comm"),

    @Json(name = "micro")
    micro("micro"),

    @Json(name = "power")
    power("power"),

    @Json(name = "meter")
    meter("meter"),

    @Json(name = "meter_issue")
    meter_issue("meter_issue"),

    @Json(name = "battery")
    battery("battery"),

    @Json(name = "storage_idle")
    storage_idle("storage_idle"),

    @Json(name = "encharge")
    encharge("encharge"),

    @Json(name = "encharge_issue")
    encharge_issue("encharge_issue"),

    @Json(name = "enpower")
    enpower("enpower"),

    @Json(name = "enpower_issue")
    enpower_issue("enpower_issue"),

    @Json(name = "retired")
    retired("retired"),

    @Json(name = "not_monitored")
    not_monitored("not_monitored"),

    @Json(name = "unused")
    unused("unused"),

    @Json(name = "disabled")
    disabled("disabled"),

    @Json(name = "debug")
    debug("debug"),

    @Json(name = "info")
    info("info"),

    @Json(name = "monitored")
    monitored("monitored"),

    @Json(name = "muted")
    muted("muted"),

    @Json(name = "warning")
    warning("warning"),

    @Json(name = "error")
    error("error"),

    @Json(name = "no_data")
    no_data("no_data"),

    @Json(name = "rma")
    rma("rma"),

    @Json(name = "unknown")
    unknown("unknown"),

    @Json(name = "nsr")
    nsr("nsr"),

    @Json(name = "any")
    any("any"),

    @Json(name = "data_upload")
    data_upload("data_upload"),

    @Json(name = "on_grid")
    on_grid("on_grid"),

    @Json(name = "off_grid")
    off_grid("off_grid"),

    @Json(name = "grid_unknown")
    grid_unknown("grid_unknown");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is SystemStatusEnum) "$data" else null

        /**
         * Returns a valid [SystemStatusEnum] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): SystemStatusEnum? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

