/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package enlighten.commissioning.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import enlighten.commissioning.apis.UsersApi
import enlighten.commissioning.models.SearchUsersResponse
import enlighten.commissioning.models.ServerError
import enlighten.commissioning.models.TooManyRequestsError
import enlighten.commissioning.models.UnprocessableEntityError
import enlighten.commissioning.models.User
import enlighten.commissioning.models.UserExpandEnum
import enlighten.commissioning.models.UserParams

class UsersApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of UsersApi
        //val apiInstance = UsersApi()

        // to test getActivationUser
        should("test getActivationUser") {
            // uncomment below to test getActivationUser
            //val activationId : kotlin.Int = 56 // kotlin.Int | Enlighten ID of the activation(system). System-generated.
            //val userId : kotlin.Int = 56 // kotlin.Int | Enlighten ID of the user. System-generated.
            //val expand : UserExpandEnum =  // UserExpandEnum | Passing expand params in the url with valid option, then the response will contain company object fields. Otherwise the company information not include in the response.
            //val result : User = apiInstance.getActivationUser(activationId, userId, expand)
            //result shouldBe ("TODO")
        }

        // to test getSelfUser
        should("test getSelfUser") {
            // uncomment below to test getSelfUser
            //val expand : UserExpandEnum =  // UserExpandEnum | Passing expand params in the url with valid option, then the response will contain company object fields. Otherwise the company information will not be provided in the response.
            //val result : User = apiInstance.getSelfUser(expand)
            //result shouldBe ("TODO")
        }

        // to test getUser
        should("test getUser") {
            // uncomment below to test getUser
            //val userId : kotlin.Int = 56 // kotlin.Int | User ID.
            //val expand : UserExpandEnum =  // UserExpandEnum | Passing expand params in the url with valid option, then the response will contain company object fields. Otherwise the company information will not be provided in the response.
            //val result : User = apiInstance.getUser(userId, expand)
            //result shouldBe ("TODO")
        }

        // to test searchUsers
        should("test searchUsers") {
            // uncomment below to test searchUsers
            //val email : kotlin.String = email_example // kotlin.String | Email address of the user.
            //val result : SearchUsersResponse = apiInstance.searchUsers(email)
            //result shouldBe ("TODO")
        }

        // to test updateActivationUser
        should("test updateActivationUser") {
            // uncomment below to test updateActivationUser
            //val activationId : kotlin.Int = 56 // kotlin.Int | Enlighten ID of the activation(system). System-generated.
            //val userId : kotlin.Int = 56 // kotlin.Int | Enlighten ID of the user. System-generated.
            //val params : UserParams =  // UserParams | 
            //val result : User = apiInstance.updateActivationUser(activationId, userId, params)
            //result shouldBe ("TODO")
        }

        // to test updateUser
        should("test updateUser") {
            // uncomment below to test updateUser
            //val userId : kotlin.Int = 56 // kotlin.Int | User ID.
            //val params : UserParams =  // UserParams | 
            //val result : User = apiInstance.updateUser(userId, params)
            //result shouldBe ("TODO")
        }

    }
}
