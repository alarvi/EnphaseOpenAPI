/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package enlighten.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import enlighten.models.MonthlyProductionResponse
import enlighten.models.Meta
import enlighten.models.MonthlyProductionResponseMeterReadingsInner

class MonthlyProductionResponseTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of MonthlyProductionResponse
        //val modelInstance = MonthlyProductionResponse()

        // to test the property `systemId` - Enlighten ID for this system.
        should("test systemId") {
            // uncomment below to test the property
            //modelInstance.systemId shouldBe ("TODO")
        }

        // to test the property `startDate` - First day included in the reporting period. The format is `YYYY-mm-dd` unless you pass a `datetime_format` parameter as described [here](https://developer.enphase.com/docs#Datetimes).
        should("test startDate") {
            // uncomment below to test the property
            //modelInstance.startDate shouldBe ("TODO")
        }

        // to test the property `endDate` - Last day included in the reporting period.
        should("test endDate") {
            // uncomment below to test the property
            //modelInstance.endDate shouldBe ("TODO")
        }

        // to test the property `productionWh` - Total production for the requested period in Watt-hours.
        should("test productionWh") {
            // uncomment below to test the property
            //modelInstance.productionWh shouldBe ("TODO")
        }

        // to test the property `meterReadings` - If the system has any revenue-grade meters installed, the meter readings at the beginning and end of the reporting period are included here. Otherwise, the array is empty.
        should("test meterReadings") {
            // uncomment below to test the property
            //modelInstance.meterReadings shouldBe ("TODO")
        }

        // to test the property `meta`
        should("test meta") {
            // uncomment below to test the property
            //modelInstance.meta shouldBe ("TODO")
        }

    }
}
