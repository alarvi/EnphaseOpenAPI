/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package enlighten.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import enlighten.apis.DefaultApi
import enlighten.models.ClientError
import enlighten.models.ConflictError
import enlighten.models.ConnectionType
import enlighten.models.ConsumptionLifetimeResponse
import enlighten.models.ConsumptionStatsResponse
import enlighten.models.EnergyLifetimeResponse
import enlighten.models.EnvoysResponse
import enlighten.models.InventoryResponse
import enlighten.models.InvertersSummaryByEnvoyOrSiteResponse
import enlighten.models.MonthlyProductionResponse
import enlighten.models.NotFoundError
import enlighten.models.ProductionMeterReadingsResponse
import enlighten.models.RgmStatsResponse
import enlighten.models.SearchSystemIdResponse
import enlighten.models.ServerError
import enlighten.models.StatsResponse
import enlighten.models.Status
import enlighten.models.SummaryResponse
import enlighten.models.SystemsResponse
import enlighten.models.UnprocessableEntityError

class DefaultApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of DefaultApi
        //val apiInstance = DefaultApi()

        // to test consumptionLifetime
        should("test consumptionLifetime") {
            // uncomment below to test consumptionLifetime
            //val systemId : kotlin.Int = 66 // kotlin.Int | 
            //val userId : kotlin.String = 4d6a51330a // kotlin.String | 
            //val startDate : java.time.LocalDate = Fri Jul 01 02:00:00 CEST 2016 // java.time.LocalDate | The date on which to start the time series. Defaults to the system's operational date.
            //val endDate : java.time.LocalDate = Sun Jul 31 02:00:00 CEST 2016 // java.time.LocalDate | The last date to include in the time series. Defaults to yesterday or the last day the system reported, whichever is earlier.
            //val result : ConsumptionLifetimeResponse = apiInstance.consumptionLifetime(systemId, userId, startDate, endDate)
            //result shouldBe ("TODO")
        }

        // to test consumptionStats
        should("test consumptionStats") {
            // uncomment below to test consumptionStats
            //val systemId : kotlin.Int = 66 // kotlin.Int | 
            //val userId : kotlin.String = 4d6a51330a // kotlin.String | 
            //val startAt : kotlin.Long = 1448946000 // kotlin.Long | Start of period to report on in Unix epoch time. If no start is specified, the assumed start is midnight today, in the timezone of the system. If the start is earlier than one year ago, the response includes an empty intervals list. If the start is earlier than the system's `operational_date`, the response data begins with the first interval of the `operational_date`.
            //val endAt : kotlin.Long = 1449011615 // kotlin.Long | End of reporting period in Unix epoch time. If no end is specified, defaults to the time of the request. If the end is later than the last reported interval the response data ends with the last reported interval.
            //val result : ConsumptionStatsResponse = apiInstance.consumptionStats(systemId, userId, startAt, endAt)
            //result shouldBe ("TODO")
        }

        // to test energyLifetime
        should("test energyLifetime") {
            // uncomment below to test energyLifetime
            //val systemId : kotlin.Int = 66 // kotlin.Int | 
            //val userId : kotlin.String = 4d6a51330a // kotlin.String | 
            //val startDate : java.time.LocalDate = Tue Jan 01 01:00:00 CET 2013 // java.time.LocalDate | The date on which to start the time series. Defaults to the system's operational date.
            //val endDate : java.time.LocalDate = Sun Jan 06 01:00:00 CET 2013 // java.time.LocalDate | The last date to include in the time series. Defaults to yesterday or the last day the system reported, whichever is earlier.
            //val production : kotlin.String = all // kotlin.String | When `all`, returns the merged time series plus the time series as reported by the microinverters and the meter on the system. Other values are ignored.
            //val result : EnergyLifetimeResponse = apiInstance.energyLifetime(systemId, userId, startDate, endDate, production)
            //result shouldBe ("TODO")
        }

        // to test envoys
        should("test envoys") {
            // uncomment below to test envoys
            //val systemId : kotlin.Int = 66 // kotlin.Int | 
            //val userId : kotlin.String = 4d6a51330a // kotlin.String | 
            //val result : EnvoysResponse = apiInstance.envoys(systemId, userId)
            //result shouldBe ("TODO")
        }

        // to test inventory
        should("test inventory") {
            // uncomment below to test inventory
            //val systemId : kotlin.Int = 66 // kotlin.Int | 
            //val userId : kotlin.String = 4d6a51330a // kotlin.String | 
            //val result : InventoryResponse = apiInstance.inventory(systemId, userId)
            //result shouldBe ("TODO")
        }

        // to test invertersSummaryByEnvoyOrSite
        should("test invertersSummaryByEnvoyOrSite") {
            // uncomment below to test invertersSummaryByEnvoyOrSite
            //val userId : kotlin.String = 4d6a51330a // kotlin.String | 
            //val siteId : kotlin.Int = 66 // kotlin.Int | The identifier of the system.
            //val result : kotlin.collections.List<InvertersSummaryByEnvoyOrSiteResponse> = apiInstance.invertersSummaryByEnvoyOrSite(userId, siteId)
            //result shouldBe ("TODO")
        }

        // to test monthlyProduction
        should("test monthlyProduction") {
            // uncomment below to test monthlyProduction
            //val systemId : kotlin.Int = 66 // kotlin.Int | 
            //val userId : kotlin.String = 4d6a51330a // kotlin.String | 
            //val startDate : java.time.LocalDate = Fri Jul 01 02:00:00 CEST 2011 // java.time.LocalDate | Start date for reporting period. The reporting period ends on the previous day of the next month; for example, a `start_date` of 2011-07-20 returns data through 2011-06-19. When the start date is the first of a calendar month, the end date is the last day of that month.
            //val result : MonthlyProductionResponse = apiInstance.monthlyProduction(systemId, userId, startDate)
            //result shouldBe ("TODO")
        }

        // to test productionMeterReadings
        should("test productionMeterReadings") {
            // uncomment below to test productionMeterReadings
            //val systemId : kotlin.Int = 66 // kotlin.Int | 
            //val userId : kotlin.String = 4d6a51330a // kotlin.String | 
            //val endAt : kotlin.Long = 1473901755 // kotlin.Long | 
            //val result : ProductionMeterReadingsResponse = apiInstance.productionMeterReadings(systemId, userId, endAt)
            //result shouldBe ("TODO")
        }

        // to test rgmStats
        should("test rgmStats") {
            // uncomment below to test rgmStats
            //val systemId : kotlin.Int = 66 // kotlin.Int | 
            //val userId : kotlin.String = 4d6a51330a // kotlin.String | 
            //val startAt : kotlin.Long = 1381474800 // kotlin.Long | Start of period to report on in Unix epoch time. If no start is specified, the assumed start is midnight today, in the timezone of the system. If the start is earlier than one year ago, the response includes an empty intervals list. If the start is earlier than the system's `operational_date`, the response data begins with the first interval of the `operational_date`.
            //val endAt : kotlin.Long = 1381561200 // kotlin.Long | End of reporting period in Unix epoch time. If no end is specified, defaults to the time of the request. If the end is later than the last reported interval the response data ends with the last reported interval.
            //val result : RgmStatsResponse = apiInstance.rgmStats(systemId, userId, startAt, endAt)
            //result shouldBe ("TODO")
        }

        // to test searchSystemId
        should("test searchSystemId") {
            // uncomment below to test searchSystemId
            //val userId : kotlin.String = 4d6a51330a // kotlin.String | 
            //val serialNum : kotlin.String = 23435345345 // kotlin.String | Serial number of the envoy.
            //val result : SearchSystemIdResponse = apiInstance.searchSystemId(userId, serialNum)
            //result shouldBe ("TODO")
        }

        // to test stats
        should("test stats") {
            // uncomment below to test stats
            //val systemId : kotlin.Int = 66 // kotlin.Int | 
            //val userId : kotlin.String = 4d6a51330a // kotlin.String | 
            //val startAt : kotlin.Long = 1381496100 // kotlin.Long | Start of reporting period in Unix epoch time. If no start is specified, defaults to midnight today, in the timezone of the system. If the start date is earlier than one year ago today, the response includes an empty intervals list. If the start is earlier than the system's `operational_date`, the response data begins with the `operational_date`.
            //val endAt : kotlin.Long = 1381497600 // kotlin.Long | End of reporting period in Unix epoch time. If no end is specified, the assumed end is now. If the end is later than the last reporting interval the response data ends with the last reported interval.
            //val result : StatsResponse = apiInstance.stats(systemId, userId, startAt, endAt)
            //result shouldBe ("TODO")
        }

        // to test summary
        should("test summary") {
            // uncomment below to test summary
            //val systemId : kotlin.Int = 66 // kotlin.Int | 
            //val userId : kotlin.String = 4d6a51330a // kotlin.String | 
            //val summaryDate : java.time.LocalDate = Fri Sep 17 02:00:00 CEST 2010 // java.time.LocalDate | Start of reporting period. If no `summary_date` is provided, the start is the current day at midnight site-local time. Otherwise, the start is midnight site-local time of the requested day. If the requested date cannot be parsed or is in the future, the response includes an informative error message and `422` status.
            //val result : SummaryResponse = apiInstance.summary(systemId, userId, summaryDate)
            //result shouldBe ("TODO")
        }

        // to test systems
        should("test systems") {
            // uncomment below to test systems
            //val userId : kotlin.String = 4d6a51330a // kotlin.String | 
            //val next : kotlin.String = 4d5467784d5445770a // kotlin.String | 
            //val limit : kotlin.Int = 100 // kotlin.Int | 
            //val systemId : kotlin.Int = 67 // kotlin.Int | 
            //val systemId2 : kotlin.collections.List<kotlin.Int> = [67] // kotlin.collections.List<kotlin.Int> | 
            //val systemName : kotlin.String = Green // kotlin.String | 
            //val systemName2 : kotlin.collections.List<kotlin.String> = ["Green"] // kotlin.collections.List<kotlin.String> | 
            //val status : Status = power // Status | 
            //val status2 : kotlin.collections.List<Status> = ["comm","micro"] // kotlin.collections.List<Status> | 
            //val reference : kotlin.String = reference_example // kotlin.String | 
            //val reference2 : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | 
            //val installer : kotlin.String = installer_example // kotlin.String | 
            //val installer2 : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | 
            //val connectionType : ConnectionType =  // ConnectionType | 
            //val connectionType2 : kotlin.collections.List<ConnectionType> = ["ethernet"] // kotlin.collections.List<ConnectionType> | 
            //val result : SystemsResponse = apiInstance.systems(userId, next, limit, systemId, systemId2, systemName, systemName2, status, status2, reference, reference2, installer, installer2, connectionType, connectionType2)
            //result shouldBe ("TODO")
        }

    }
}
