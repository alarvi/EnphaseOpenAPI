/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package enlighten.models

import enlighten.models.InvertersSummaryByEnvoyOrSiteResponseMicroInvertersInnerEnergy
import enlighten.models.InvertersSummaryByEnvoyOrSiteResponseMicroInvertersInnerPowerProduced

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param id 
 * @param model Model number of this Microinverter.
 * @param partNumber The Enphase part number of this Microinverter.
 * @param serialNumber The serial number of this Microinverter.
 * @param sku 
 * @param status The current status of this Microinverter. * `normal` - The microinverter is operating normally. * `power` - There is a production issue. * `micro` - The microinverter is not reporting. * `retired` - The microinverter is retired.
 * @param powerProduced 
 * @param procLoad 
 * @param paramTable 
 * @param envoySerialNumber 
 * @param energy 
 * @param gridProfile 
 * @param lastReportDate The last time this device submitted a report, by default expressed in Unix epoch time. If Enlighten has no record of a report from this Envoy, returns null.
 */


data class InvertersSummaryByEnvoyOrSiteResponseMicroInvertersInner (

    @Json(name = "id")
    val id: kotlin.Int,

    /* Model number of this Microinverter. */
    @Json(name = "model")
    val model: kotlin.String,

    /* The Enphase part number of this Microinverter. */
    @Json(name = "part_number")
    val partNumber: kotlin.String,

    /* The serial number of this Microinverter. */
    @Json(name = "serial_number")
    val serialNumber: kotlin.String,

    @Json(name = "sku")
    val sku: kotlin.String,

    /* The current status of this Microinverter. * `normal` - The microinverter is operating normally. * `power` - There is a production issue. * `micro` - The microinverter is not reporting. * `retired` - The microinverter is retired. */
    @Json(name = "status")
    val status: InvertersSummaryByEnvoyOrSiteResponseMicroInvertersInner.Status,

    @Json(name = "power_produced")
    val powerProduced: InvertersSummaryByEnvoyOrSiteResponseMicroInvertersInnerPowerProduced,

    @Json(name = "proc_load")
    val procLoad: kotlin.String,

    @Json(name = "param_table")
    val paramTable: kotlin.String,

    @Json(name = "envoy_serial_number")
    val envoySerialNumber: kotlin.String,

    @Json(name = "energy")
    val energy: InvertersSummaryByEnvoyOrSiteResponseMicroInvertersInnerEnergy,

    @Json(name = "grid_profile")
    val gridProfile: kotlin.String,

    /* The last time this device submitted a report, by default expressed in Unix epoch time. If Enlighten has no record of a report from this Envoy, returns null. */
    @Json(name = "last_report_date")
    val lastReportDate: java.time.LocalDate

) {

    /**
     * The current status of this Microinverter. * `normal` - The microinverter is operating normally. * `power` - There is a production issue. * `micro` - The microinverter is not reporting. * `retired` - The microinverter is retired.
     *
     * Values: normal,power,micro,retired
     */
    @JsonClass(generateAdapter = false)
    enum class Status(val value: kotlin.String) {
        @Json(name = "normal") normal("normal"),
        @Json(name = "power") power("power"),
        @Json(name = "micro") micro("micro"),
        @Json(name = "retired") retired("retired");
    }
}

