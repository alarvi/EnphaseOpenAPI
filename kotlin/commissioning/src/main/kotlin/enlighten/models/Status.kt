/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package enlighten.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * The current status of the system. * `comm` - One or more Envoys on the system are not communicating to Enlighten. * `power` - There is a production issue on the system. * `meter` - There is a communication problem between an Envoy and a revenue-grade meter on the system. * `meter_issue` - One or more meters on the system are reporting unusual measurements. * `micro` - There is a communication problem between an Envoy and microinverters that it monitors. * `battery` - There is a communication problem between an Envoy and an AC battery on the system. * `storage_idle` - An AC battery on the system has not changed its state of charge for more than 72 hours. * `normal` - The system is operating normally.
 *
 * Values: comm,power,meter,meter_issue,micro,battery,storage_idle,normal
 */

@JsonClass(generateAdapter = false)
enum class Status(val value: kotlin.String) {

    @Json(name = "comm")
    comm("comm"),

    @Json(name = "power")
    power("power"),

    @Json(name = "meter")
    meter("meter"),

    @Json(name = "meter_issue")
    meter_issue("meter_issue"),

    @Json(name = "micro")
    micro("micro"),

    @Json(name = "battery")
    battery("battery"),

    @Json(name = "storage_idle")
    storage_idle("storage_idle"),

    @Json(name = "normal")
    normal("normal");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is Status) "$data" else null

        /**
         * Returns a valid [Status] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): Status? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

