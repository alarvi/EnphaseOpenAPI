/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package enlighten.models

import enlighten.models.Status

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param currentPower Current power production, in Watts. For historical requests, returns 0.
 * @param energyLifetime Energy produced in the lifetime of the system, excluding the requested day, in Watt-hours.
 * @param energyToday Energy produced on the requested day, in Watt-hours.
 * @param lastIntervalEndAt The last known time that the system produced energy. When a system has not been communicating for a length of time, the `last_report_at` can be recent, whereas the `last_interval_end_at` may be further back.
 * @param lastReportAt The last time an Envoy on this system reported. The format is Unix epoch time unless you pass a `datetime_format` parameter as described [here](https://developer.enphase.com/docs#Datetimes).
 * @param modules Number of active (not retired) modules. For historical requests, returns 0.
 * @param operationalAt The time at which this system became operational. Corresponds to the system's interconnect time, if one is specified. Otherwise, it is the system's first interval end time. The format is Unix epoch time unless you pass a `datetime_format` parameter as described [here](https://developer.enphase.com/docs#Datetimes).
 * @param sizeW The size of the system, in Watts. For historical requests, returns 0.
 * @param source Indicates whether the production of this system is measured by its microinverters (`microinverters`) or by revenue-grade meters (`meter`) installed on the system.
 * @param status 
 * @param summaryDate Effective date of the response. For historical requests, returns the date requested. For current requests, returns the current date. The format is `YYYY-mm-dd` unless you pass a `datetime_format` parameter as described [here](https://developer.enphase.com/docs#Datetimes).
 * @param systemId The Enlighten ID of the system.
 */


data class SummaryResponse (

    /* Current power production, in Watts. For historical requests, returns 0. */
    @Json(name = "current_power")
    val currentPower: kotlin.Int,

    /* Energy produced in the lifetime of the system, excluding the requested day, in Watt-hours. */
    @Json(name = "energy_lifetime")
    val energyLifetime: kotlin.Int,

    /* Energy produced on the requested day, in Watt-hours. */
    @Json(name = "energy_today")
    val energyToday: kotlin.Int,

    /* The last known time that the system produced energy. When a system has not been communicating for a length of time, the `last_report_at` can be recent, whereas the `last_interval_end_at` may be further back. */
    @Json(name = "last_interval_end_at")
    val lastIntervalEndAt: kotlin.Long,

    /* The last time an Envoy on this system reported. The format is Unix epoch time unless you pass a `datetime_format` parameter as described [here](https://developer.enphase.com/docs#Datetimes). */
    @Json(name = "last_report_at")
    val lastReportAt: kotlin.Long,

    /* Number of active (not retired) modules. For historical requests, returns 0. */
    @Json(name = "modules")
    val modules: kotlin.Int,

    /* The time at which this system became operational. Corresponds to the system's interconnect time, if one is specified. Otherwise, it is the system's first interval end time. The format is Unix epoch time unless you pass a `datetime_format` parameter as described [here](https://developer.enphase.com/docs#Datetimes). */
    @Json(name = "operational_at")
    val operationalAt: kotlin.Long,

    /* The size of the system, in Watts. For historical requests, returns 0. */
    @Json(name = "size_w")
    val sizeW: kotlin.Int,

    /* Indicates whether the production of this system is measured by its microinverters (`microinverters`) or by revenue-grade meters (`meter`) installed on the system. */
    @Json(name = "source")
    val source: SummaryResponse.Source,

    @Json(name = "status")
    val status: Status,

    /* Effective date of the response. For historical requests, returns the date requested. For current requests, returns the current date. The format is `YYYY-mm-dd` unless you pass a `datetime_format` parameter as described [here](https://developer.enphase.com/docs#Datetimes). */
    @Json(name = "summary_date")
    val summaryDate: java.time.LocalDate,

    /* The Enlighten ID of the system. */
    @Json(name = "system_id")
    val systemId: kotlin.Int

) {

    /**
     * Indicates whether the production of this system is measured by its microinverters (`microinverters`) or by revenue-grade meters (`meter`) installed on the system.
     *
     * Values: microinverters,meter
     */
    @JsonClass(generateAdapter = false)
    enum class Source(val value: kotlin.String) {
        @Json(name = "microinverters") microinverters("microinverters"),
        @Json(name = "meter") meter("meter");
    }
}

