/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package enlighten.commissioning.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import enlighten.commissioning.models.Activation
import enlighten.commissioning.models.DeleteActivationResponse
import enlighten.commissioning.models.GetActivationOpsProductionModeResponse
import enlighten.commissioning.models.GetPartnerActivationsResponse
import enlighten.commissioning.models.GrantActivationUserAccessResponse
import enlighten.commissioning.models.RevokeActivationUserAccessResponse
import enlighten.commissioning.models.ServerError
import enlighten.commissioning.models.SetActivationOpsProductionModeRequest
import enlighten.commissioning.models.SetActivationOpsProductionModeResponse
import enlighten.commissioning.models.SystemExpandEnum
import enlighten.commissioning.models.SystemParams
import enlighten.commissioning.models.SystemStageEnum
import enlighten.commissioning.models.TooManyRequestsError
import enlighten.commissioning.models.UnprocessableEntityError

import com.squareup.moshi.Json

import enlighten.commissioning.infrastructure.ApiClient
import enlighten.commissioning.infrastructure.ApiResponse
import enlighten.commissioning.infrastructure.ClientException
import enlighten.commissioning.infrastructure.ClientError
import enlighten.commissioning.infrastructure.ServerException
import enlighten.commissioning.infrastructure.ServerError
import enlighten.commissioning.infrastructure.MultiValueMap
import enlighten.commissioning.infrastructure.PartConfig
import enlighten.commissioning.infrastructure.RequestConfig
import enlighten.commissioning.infrastructure.RequestMethod
import enlighten.commissioning.infrastructure.ResponseType
import enlighten.commissioning.infrastructure.Success
import enlighten.commissioning.infrastructure.toMultiValue

class ActivationsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.enphaseenergy.com/api/v4")
        }
    }

    /**
     * Create new activation
     * Create new activation.
     * @param params  (optional)
     * @return Activation
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createPartnerActivation(params: SystemParams? = null) : Activation {
        val localVarResponse = createPartnerActivationWithHttpInfo(params = params)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Activation
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create new activation
     * Create new activation.
     * @param params  (optional)
     * @return ApiResponse<Activation?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createPartnerActivationWithHttpInfo(params: SystemParams?) : ApiResponse<Activation?> {
        val localVariableConfig = createPartnerActivationRequestConfig(params = params)

        return request<SystemParams, Activation>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createPartnerActivation
     *
     * @param params  (optional)
     * @return RequestConfig
     */
    fun createPartnerActivationRequestConfig(params: SystemParams?) : RequestConfig<SystemParams> {
        val localVariableBody = params
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/partner/activations",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete an activation by ID
     * To delete an activation, the activation stage must be less than 3 and there are no active devices associated with it.
     * @param activationId Enlighten ID of the activation(system).
     * @return DeleteActivationResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteActivation(activationId: kotlin.Int) : DeleteActivationResponse {
        val localVarResponse = deleteActivationWithHttpInfo(activationId = activationId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DeleteActivationResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete an activation by ID
     * To delete an activation, the activation stage must be less than 3 and there are no active devices associated with it.
     * @param activationId Enlighten ID of the activation(system).
     * @return ApiResponse<DeleteActivationResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteActivationWithHttpInfo(activationId: kotlin.Int) : ApiResponse<DeleteActivationResponse?> {
        val localVariableConfig = deleteActivationRequestConfig(activationId = activationId)

        return request<Unit, DeleteActivationResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteActivation
     *
     * @param activationId Enlighten ID of the activation(system).
     * @return RequestConfig
     */
    fun deleteActivationRequestConfig(activationId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/partner/activations/{activation_id}".replace("{"+"activation_id"+"}", encodeURIComponent(activationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get production mode
     * Get production mode for a particular system. For that system stage must be greater than 2, Otherwise you will get 422.
     * @param activationId Enlighten ID of the activation(system). System-generated.
     * @return GetActivationOpsProductionModeResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getActivationOpsProductionMode(activationId: kotlin.Int) : GetActivationOpsProductionModeResponse {
        val localVarResponse = getActivationOpsProductionModeWithHttpInfo(activationId = activationId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetActivationOpsProductionModeResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get production mode
     * Get production mode for a particular system. For that system stage must be greater than 2, Otherwise you will get 422.
     * @param activationId Enlighten ID of the activation(system). System-generated.
     * @return ApiResponse<GetActivationOpsProductionModeResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getActivationOpsProductionModeWithHttpInfo(activationId: kotlin.Int) : ApiResponse<GetActivationOpsProductionModeResponse?> {
        val localVariableConfig = getActivationOpsProductionModeRequestConfig(activationId = activationId)

        return request<Unit, GetActivationOpsProductionModeResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getActivationOpsProductionMode
     *
     * @param activationId Enlighten ID of the activation(system). System-generated.
     * @return RequestConfig
     */
    fun getActivationOpsProductionModeRequestConfig(activationId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/activations/{activation_id}/ops/production_mode".replace("{"+"activation_id"+"}", encodeURIComponent(activationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieves an Activation by ID
     * By default, the body of the response looks like the example below. However, you can choose to retrieve more information about the activation using response expansion, for example instead of returning only the owner&#39;s name within the system hash, the response includes detailed information about the owner by using expand&#x3D;owner. You can also expand the owner&#39;s company by using expand&#x3D;owner.company. The response now includes information about the owner and the company he belongs to, if any. By using expand&#x3D;host will include details about the system host. You can also expand the host&#39;s company by using expand&#x3D;host.company. The response now includes information about the host and the company he belongs to.
     * @param activationId Enlighten ID of the activation(system). System-generated.
     * @param expand Retrieve more information about the activation. The expand query parameter is a comma-separated list of associations to expand. (optional)
     * @return Activation
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getPartnerActivation(activationId: kotlin.Int, expand: SystemExpandEnum? = null) : Activation {
        val localVarResponse = getPartnerActivationWithHttpInfo(activationId = activationId, expand = expand)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Activation
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieves an Activation by ID
     * By default, the body of the response looks like the example below. However, you can choose to retrieve more information about the activation using response expansion, for example instead of returning only the owner&#39;s name within the system hash, the response includes detailed information about the owner by using expand&#x3D;owner. You can also expand the owner&#39;s company by using expand&#x3D;owner.company. The response now includes information about the owner and the company he belongs to, if any. By using expand&#x3D;host will include details about the system host. You can also expand the host&#39;s company by using expand&#x3D;host.company. The response now includes information about the host and the company he belongs to.
     * @param activationId Enlighten ID of the activation(system). System-generated.
     * @param expand Retrieve more information about the activation. The expand query parameter is a comma-separated list of associations to expand. (optional)
     * @return ApiResponse<Activation?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getPartnerActivationWithHttpInfo(activationId: kotlin.Int, expand: SystemExpandEnum?) : ApiResponse<Activation?> {
        val localVariableConfig = getPartnerActivationRequestConfig(activationId = activationId, expand = expand)

        return request<Unit, Activation>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getPartnerActivation
     *
     * @param activationId Enlighten ID of the activation(system). System-generated.
     * @param expand Retrieve more information about the activation. The expand query parameter is a comma-separated list of associations to expand. (optional)
     * @return RequestConfig
     */
    fun getPartnerActivationRequestConfig(activationId: kotlin.Int, expand: SystemExpandEnum?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (expand != null) {
                    put("expand", listOf(expand.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/partner/activations/{activation_id}".replace("{"+"activation_id"+"}", encodeURIComponent(activationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * List of Activations
     * Returns a list of activations for which the user can make API requests. There is a limit to the number of activations which can be returned at one time. If the first request does not return a full list, use the &#39;next&#39; attribute in the response body to request the next page. By default, activations are returned in batches of 100. The maximum page size is 1000. Provide only valid filters. During filter the activations empty and invalid filter fields are ignored. In case the installer ID doesn&#39;t exist, API will return an empty array.
     * @param next If the first request does not return a full list, use the &#39;next&#39; attribute in the response body to request the next page. By default, activations are returned in batches of 100. The maximum page size is 1000. If the returned list below the limit, then response does not include the &#39;next&#39; field. (optional)
     * @param limit There is a limit to the number of activations which can be returned at one time. (optional)
     * @param stage Filter activations by stage. Passing in_progress alone will consider as you have passed all the 1,2,3,4 stages. Passing multiple stage values using comma to filter. E.g. stage&#x3D;1,2,3. Passing in_progress with any other combination will give you empty systems. This parameter searches for an exact match of the input value. (optional)
     * @param reference Filter activations by company reference. (optional)
     * @param installerId Filter activations by installer ID. (optional)
     * @param systemName Filter activations by system name. (optional)
     * @param address Filter activations by address. This will perform a partial search and return if match found with street1, street2, country, state, zipcode of the activation. (optional)
     * @param region Filter activations by region. Provide two latitude, longitude values to find activations between them. Format &#39;latitude1,longitude1,latitude2,longitude2&#39; e.g value &#39;44.968046,-94.420307,44.33328,-89.132008&#39;. (optional)
     * @param search Filter activations by search. This will perform a partial search and return if match found with system_name, reference, system_id, street1 and street2, country, state, zipcode of the activation. (optional)
     * @return GetPartnerActivationsResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getPartnerActivations(next: kotlin.String? = null, limit: kotlin.Int? = null, stage: SystemStageEnum? = null, reference: kotlin.String? = null, installerId: kotlin.Int? = null, systemName: kotlin.String? = null, address: kotlin.String? = null, region: kotlin.String? = null, search: kotlin.String? = null) : GetPartnerActivationsResponse {
        val localVarResponse = getPartnerActivationsWithHttpInfo(next = next, limit = limit, stage = stage, reference = reference, installerId = installerId, systemName = systemName, address = address, region = region, search = search)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetPartnerActivationsResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List of Activations
     * Returns a list of activations for which the user can make API requests. There is a limit to the number of activations which can be returned at one time. If the first request does not return a full list, use the &#39;next&#39; attribute in the response body to request the next page. By default, activations are returned in batches of 100. The maximum page size is 1000. Provide only valid filters. During filter the activations empty and invalid filter fields are ignored. In case the installer ID doesn&#39;t exist, API will return an empty array.
     * @param next If the first request does not return a full list, use the &#39;next&#39; attribute in the response body to request the next page. By default, activations are returned in batches of 100. The maximum page size is 1000. If the returned list below the limit, then response does not include the &#39;next&#39; field. (optional)
     * @param limit There is a limit to the number of activations which can be returned at one time. (optional)
     * @param stage Filter activations by stage. Passing in_progress alone will consider as you have passed all the 1,2,3,4 stages. Passing multiple stage values using comma to filter. E.g. stage&#x3D;1,2,3. Passing in_progress with any other combination will give you empty systems. This parameter searches for an exact match of the input value. (optional)
     * @param reference Filter activations by company reference. (optional)
     * @param installerId Filter activations by installer ID. (optional)
     * @param systemName Filter activations by system name. (optional)
     * @param address Filter activations by address. This will perform a partial search and return if match found with street1, street2, country, state, zipcode of the activation. (optional)
     * @param region Filter activations by region. Provide two latitude, longitude values to find activations between them. Format &#39;latitude1,longitude1,latitude2,longitude2&#39; e.g value &#39;44.968046,-94.420307,44.33328,-89.132008&#39;. (optional)
     * @param search Filter activations by search. This will perform a partial search and return if match found with system_name, reference, system_id, street1 and street2, country, state, zipcode of the activation. (optional)
     * @return ApiResponse<GetPartnerActivationsResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getPartnerActivationsWithHttpInfo(next: kotlin.String?, limit: kotlin.Int?, stage: SystemStageEnum?, reference: kotlin.String?, installerId: kotlin.Int?, systemName: kotlin.String?, address: kotlin.String?, region: kotlin.String?, search: kotlin.String?) : ApiResponse<GetPartnerActivationsResponse?> {
        val localVariableConfig = getPartnerActivationsRequestConfig(next = next, limit = limit, stage = stage, reference = reference, installerId = installerId, systemName = systemName, address = address, region = region, search = search)

        return request<Unit, GetPartnerActivationsResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getPartnerActivations
     *
     * @param next If the first request does not return a full list, use the &#39;next&#39; attribute in the response body to request the next page. By default, activations are returned in batches of 100. The maximum page size is 1000. If the returned list below the limit, then response does not include the &#39;next&#39; field. (optional)
     * @param limit There is a limit to the number of activations which can be returned at one time. (optional)
     * @param stage Filter activations by stage. Passing in_progress alone will consider as you have passed all the 1,2,3,4 stages. Passing multiple stage values using comma to filter. E.g. stage&#x3D;1,2,3. Passing in_progress with any other combination will give you empty systems. This parameter searches for an exact match of the input value. (optional)
     * @param reference Filter activations by company reference. (optional)
     * @param installerId Filter activations by installer ID. (optional)
     * @param systemName Filter activations by system name. (optional)
     * @param address Filter activations by address. This will perform a partial search and return if match found with street1, street2, country, state, zipcode of the activation. (optional)
     * @param region Filter activations by region. Provide two latitude, longitude values to find activations between them. Format &#39;latitude1,longitude1,latitude2,longitude2&#39; e.g value &#39;44.968046,-94.420307,44.33328,-89.132008&#39;. (optional)
     * @param search Filter activations by search. This will perform a partial search and return if match found with system_name, reference, system_id, street1 and street2, country, state, zipcode of the activation. (optional)
     * @return RequestConfig
     */
    fun getPartnerActivationsRequestConfig(next: kotlin.String?, limit: kotlin.Int?, stage: SystemStageEnum?, reference: kotlin.String?, installerId: kotlin.Int?, systemName: kotlin.String?, address: kotlin.String?, region: kotlin.String?, search: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (next != null) {
                    put("next", listOf(next.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (stage != null) {
                    put("stage", listOf(stage.toString()))
                }
                if (reference != null) {
                    put("reference", listOf(reference.toString()))
                }
                if (installerId != null) {
                    put("installer_id", listOf(installerId.toString()))
                }
                if (systemName != null) {
                    put("system_name", listOf(systemName.toString()))
                }
                if (address != null) {
                    put("address", listOf(address.toString()))
                }
                if (region != null) {
                    put("region", listOf(region.toString()))
                }
                if (search != null) {
                    put("search", listOf(search.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/partner/activations",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Grant Access
     * Gives a user permission to view this system. Response status 200 indicates the access was granted. The user must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches. In all other cases you will get 401 response.
     * @param activationId Enlighten ID of the activation(system).
     * @param userId Enlighten ID of the user which you want to grant access.
     * @return GrantActivationUserAccessResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun grantActivationUserAccess(activationId: kotlin.Int, userId: kotlin.Int) : GrantActivationUserAccessResponse {
        val localVarResponse = grantActivationUserAccessWithHttpInfo(activationId = activationId, userId = userId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GrantActivationUserAccessResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Grant Access
     * Gives a user permission to view this system. Response status 200 indicates the access was granted. The user must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches. In all other cases you will get 401 response.
     * @param activationId Enlighten ID of the activation(system).
     * @param userId Enlighten ID of the user which you want to grant access.
     * @return ApiResponse<GrantActivationUserAccessResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun grantActivationUserAccessWithHttpInfo(activationId: kotlin.Int, userId: kotlin.Int) : ApiResponse<GrantActivationUserAccessResponse?> {
        val localVariableConfig = grantActivationUserAccessRequestConfig(activationId = activationId, userId = userId)

        return request<Unit, GrantActivationUserAccessResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation grantActivationUserAccess
     *
     * @param activationId Enlighten ID of the activation(system).
     * @param userId Enlighten ID of the user which you want to grant access.
     * @return RequestConfig
     */
    fun grantActivationUserAccessRequestConfig(activationId: kotlin.Int, userId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/activations/{activation_id}/users/{user_id}".replace("{"+"activation_id"+"}", encodeURIComponent(activationId.toString())).replace("{"+"user_id"+"}", encodeURIComponent(userId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Revoke Access
     * Revokes a user&#39;s permission to view this system. Response status 200 indicates the access was revoked. The user must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches. In all other cases you will get 401 response.
     * @param activationId Enlighten ID of the activation(system).
     * @param userId Enlighten ID of the user which you want to revoke the access.
     * @return RevokeActivationUserAccessResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun revokeActivationUserAccess(activationId: kotlin.Int, userId: kotlin.Int) : RevokeActivationUserAccessResponse {
        val localVarResponse = revokeActivationUserAccessWithHttpInfo(activationId = activationId, userId = userId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RevokeActivationUserAccessResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Revoke Access
     * Revokes a user&#39;s permission to view this system. Response status 200 indicates the access was revoked. The user must be the owner or the host of an activation the API user can manage (or) Users created by API user (or) Users who belong to your company or its branches. In all other cases you will get 401 response.
     * @param activationId Enlighten ID of the activation(system).
     * @param userId Enlighten ID of the user which you want to revoke the access.
     * @return ApiResponse<RevokeActivationUserAccessResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun revokeActivationUserAccessWithHttpInfo(activationId: kotlin.Int, userId: kotlin.Int) : ApiResponse<RevokeActivationUserAccessResponse?> {
        val localVariableConfig = revokeActivationUserAccessRequestConfig(activationId = activationId, userId = userId)

        return request<Unit, RevokeActivationUserAccessResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation revokeActivationUserAccess
     *
     * @param activationId Enlighten ID of the activation(system).
     * @param userId Enlighten ID of the user which you want to revoke the access.
     * @return RequestConfig
     */
    fun revokeActivationUserAccessRequestConfig(activationId: kotlin.Int, userId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/activations/{activation_id}/users/{user_id}".replace("{"+"activation_id"+"}", encodeURIComponent(activationId.toString())).replace("{"+"user_id"+"}", encodeURIComponent(userId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Set production mode
     * Enable or Disable production mode for a particular system. For that system stage must be greater than 2, Otherwise you will get 422.
     * @param activationId Enlighten ID of the activation(system). System-generated.
     * @param params  (optional)
     * @return SetActivationOpsProductionModeResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun setActivationOpsProductionMode(activationId: kotlin.Int, params: SetActivationOpsProductionModeRequest? = null) : SetActivationOpsProductionModeResponse {
        val localVarResponse = setActivationOpsProductionModeWithHttpInfo(activationId = activationId, params = params)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SetActivationOpsProductionModeResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Set production mode
     * Enable or Disable production mode for a particular system. For that system stage must be greater than 2, Otherwise you will get 422.
     * @param activationId Enlighten ID of the activation(system). System-generated.
     * @param params  (optional)
     * @return ApiResponse<SetActivationOpsProductionModeResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun setActivationOpsProductionModeWithHttpInfo(activationId: kotlin.Int, params: SetActivationOpsProductionModeRequest?) : ApiResponse<SetActivationOpsProductionModeResponse?> {
        val localVariableConfig = setActivationOpsProductionModeRequestConfig(activationId = activationId, params = params)

        return request<SetActivationOpsProductionModeRequest, SetActivationOpsProductionModeResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation setActivationOpsProductionMode
     *
     * @param activationId Enlighten ID of the activation(system). System-generated.
     * @param params  (optional)
     * @return RequestConfig
     */
    fun setActivationOpsProductionModeRequestConfig(activationId: kotlin.Int, params: SetActivationOpsProductionModeRequest?) : RequestConfig<SetActivationOpsProductionModeRequest> {
        val localVariableBody = params
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/activations/{activation_id}/ops/production_mode".replace("{"+"activation_id"+"}", encodeURIComponent(activationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update an activation.
     * Update an activation.
     * @param activationId Enlighten ID of the activation(system). System-generated.
     * @param params  (optional)
     * @return Activation
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updatePartnerActivation(activationId: kotlin.Int, params: SystemParams? = null) : Activation {
        val localVarResponse = updatePartnerActivationWithHttpInfo(activationId = activationId, params = params)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Activation
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update an activation.
     * Update an activation.
     * @param activationId Enlighten ID of the activation(system). System-generated.
     * @param params  (optional)
     * @return ApiResponse<Activation?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updatePartnerActivationWithHttpInfo(activationId: kotlin.Int, params: SystemParams?) : ApiResponse<Activation?> {
        val localVariableConfig = updatePartnerActivationRequestConfig(activationId = activationId, params = params)

        return request<SystemParams, Activation>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updatePartnerActivation
     *
     * @param activationId Enlighten ID of the activation(system). System-generated.
     * @param params  (optional)
     * @return RequestConfig
     */
    fun updatePartnerActivationRequestConfig(activationId: kotlin.Int, params: SystemParams?) : RequestConfig<SystemParams> {
        val localVariableBody = params
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/partner/activations/{activation_id}".replace("{"+"activation_id"+"}", encodeURIComponent(activationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
