/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package enlighten.commissioning.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import enlighten.commissioning.models.ServerError
import enlighten.commissioning.models.SystemEstimate
import enlighten.commissioning.models.TooManyRequestsError
import enlighten.commissioning.models.UnprocessableEntityError
import enlighten.commissioning.models.UpdateActivationEstimateRequest

import com.squareup.moshi.Json

import enlighten.commissioning.infrastructure.ApiClient
import enlighten.commissioning.infrastructure.ApiResponse
import enlighten.commissioning.infrastructure.ClientException
import enlighten.commissioning.infrastructure.ClientError
import enlighten.commissioning.infrastructure.ServerException
import enlighten.commissioning.infrastructure.ServerError
import enlighten.commissioning.infrastructure.MultiValueMap
import enlighten.commissioning.infrastructure.PartConfig
import enlighten.commissioning.infrastructure.RequestConfig
import enlighten.commissioning.infrastructure.RequestMethod
import enlighten.commissioning.infrastructure.ResponseType
import enlighten.commissioning.infrastructure.Success
import enlighten.commissioning.infrastructure.toMultiValue

class EstimateApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.enphaseenergy.com/api/v4")
        }
    }

    /**
     * Returns the estimate for this system.
     * Provides access to production estimates for a system. An estimate includes the annual degradation factor for the system as well as estimated production, in kWh, for each month. By default degrade_factor value is 0.5 and month_estimates value is an empty array.
     * @param activationId Activation ID.
     * @return SystemEstimate
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getActivationEstimate(activationId: kotlin.Int) : SystemEstimate {
        val localVarResponse = getActivationEstimateWithHttpInfo(activationId = activationId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SystemEstimate
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Returns the estimate for this system.
     * Provides access to production estimates for a system. An estimate includes the annual degradation factor for the system as well as estimated production, in kWh, for each month. By default degrade_factor value is 0.5 and month_estimates value is an empty array.
     * @param activationId Activation ID.
     * @return ApiResponse<SystemEstimate?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getActivationEstimateWithHttpInfo(activationId: kotlin.Int) : ApiResponse<SystemEstimate?> {
        val localVariableConfig = getActivationEstimateRequestConfig(activationId = activationId)

        return request<Unit, SystemEstimate>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getActivationEstimate
     *
     * @param activationId Activation ID.
     * @return RequestConfig
     */
    fun getActivationEstimateRequestConfig(activationId: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/activations/{activation_id}/estimate".replace("{"+"activation_id"+"}", encodeURIComponent(activationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update the estimate for this system.
     * Updates the estimate for this system.
     * @param activationId Activation ID.
     * @param params  (optional)
     * @return SystemEstimate
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateActivationEstimate(activationId: kotlin.Int, params: UpdateActivationEstimateRequest? = null) : SystemEstimate {
        val localVarResponse = updateActivationEstimateWithHttpInfo(activationId = activationId, params = params)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SystemEstimate
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update the estimate for this system.
     * Updates the estimate for this system.
     * @param activationId Activation ID.
     * @param params  (optional)
     * @return ApiResponse<SystemEstimate?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateActivationEstimateWithHttpInfo(activationId: kotlin.Int, params: UpdateActivationEstimateRequest?) : ApiResponse<SystemEstimate?> {
        val localVariableConfig = updateActivationEstimateRequestConfig(activationId = activationId, params = params)

        return request<UpdateActivationEstimateRequest, SystemEstimate>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateActivationEstimate
     *
     * @param activationId Activation ID.
     * @param params  (optional)
     * @return RequestConfig
     */
    fun updateActivationEstimateRequestConfig(activationId: kotlin.Int, params: UpdateActivationEstimateRequest?) : RequestConfig<UpdateActivationEstimateRequest> {
        val localVariableBody = params
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/activations/{activation_id}/estimate".replace("{"+"activation_id"+"}", encodeURIComponent(activationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
