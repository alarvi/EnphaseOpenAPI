/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package enlighten.commissioning.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import enlighten.commissioning.models.GetSystemMeterResponse
import enlighten.commissioning.models.ServerError
import enlighten.commissioning.models.SetActivationMeterStatusRequest
import enlighten.commissioning.models.SetActivationMeterStatusResponse
import enlighten.commissioning.models.TooManyRequestsError
import enlighten.commissioning.models.UnprocessableEntityError
import enlighten.commissioning.models.UpdateSystemMeterResponse

import com.squareup.moshi.Json

import enlighten.commissioning.infrastructure.ApiClient
import enlighten.commissioning.infrastructure.ApiResponse
import enlighten.commissioning.infrastructure.ClientException
import enlighten.commissioning.infrastructure.ClientError
import enlighten.commissioning.infrastructure.ServerException
import enlighten.commissioning.infrastructure.ServerError
import enlighten.commissioning.infrastructure.MultiValueMap
import enlighten.commissioning.infrastructure.PartConfig
import enlighten.commissioning.infrastructure.RequestConfig
import enlighten.commissioning.infrastructure.RequestMethod
import enlighten.commissioning.infrastructure.ResponseType
import enlighten.commissioning.infrastructure.Success
import enlighten.commissioning.infrastructure.toMultiValue

class MetersApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.enphaseenergy.com/api/v4")
        }
    }

    /**
     * Returns the requested meter detail.
     * Returns the requested meter by serial number. You must have access to the requested system and meter; otherwise a 401 is returned.
     * @param systemId System ID.
     * @param serialNumber Meter serial number.
     * @return GetSystemMeterResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSystemMeter(systemId: kotlin.Int, serialNumber: kotlin.String) : GetSystemMeterResponse {
        val localVarResponse = getSystemMeterWithHttpInfo(systemId = systemId, serialNumber = serialNumber)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetSystemMeterResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Returns the requested meter detail.
     * Returns the requested meter by serial number. You must have access to the requested system and meter; otherwise a 401 is returned.
     * @param systemId System ID.
     * @param serialNumber Meter serial number.
     * @return ApiResponse<GetSystemMeterResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSystemMeterWithHttpInfo(systemId: kotlin.Int, serialNumber: kotlin.String) : ApiResponse<GetSystemMeterResponse?> {
        val localVariableConfig = getSystemMeterRequestConfig(systemId = systemId, serialNumber = serialNumber)

        return request<Unit, GetSystemMeterResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSystemMeter
     *
     * @param systemId System ID.
     * @param serialNumber Meter serial number.
     * @return RequestConfig
     */
    fun getSystemMeterRequestConfig(systemId: kotlin.Int, serialNumber: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/systems/{system_id}/meters/{serial_number}".replace("{"+"system_id"+"}", encodeURIComponent(systemId.toString())).replace("{"+"serial_number"+"}", encodeURIComponent(serialNumber.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Enable or Disable the meters.
     * Enable or Disable the meters. You must have access to the requested system and meter; otherwise a 401 is returned.
     * @param activationId Activation ID.
     * @param serialNumber Meter serial number.
     * @param params  (optional)
     * @return SetActivationMeterStatusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun setActivationMeterStatus(activationId: kotlin.Int, serialNumber: kotlin.String, params: SetActivationMeterStatusRequest? = null) : SetActivationMeterStatusResponse {
        val localVarResponse = setActivationMeterStatusWithHttpInfo(activationId = activationId, serialNumber = serialNumber, params = params)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SetActivationMeterStatusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Enable or Disable the meters.
     * Enable or Disable the meters. You must have access to the requested system and meter; otherwise a 401 is returned.
     * @param activationId Activation ID.
     * @param serialNumber Meter serial number.
     * @param params  (optional)
     * @return ApiResponse<SetActivationMeterStatusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun setActivationMeterStatusWithHttpInfo(activationId: kotlin.Int, serialNumber: kotlin.String, params: SetActivationMeterStatusRequest?) : ApiResponse<SetActivationMeterStatusResponse?> {
        val localVariableConfig = setActivationMeterStatusRequestConfig(activationId = activationId, serialNumber = serialNumber, params = params)

        return request<SetActivationMeterStatusRequest, SetActivationMeterStatusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation setActivationMeterStatus
     *
     * @param activationId Activation ID.
     * @param serialNumber Meter serial number.
     * @param params  (optional)
     * @return RequestConfig
     */
    fun setActivationMeterStatusRequestConfig(activationId: kotlin.Int, serialNumber: kotlin.String, params: SetActivationMeterStatusRequest?) : RequestConfig<SetActivationMeterStatusRequest> {
        val localVariableBody = params
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/activations/{activation_id}/meters/{serial_number}/meter_control".replace("{"+"activation_id"+"}", encodeURIComponent(activationId.toString())).replace("{"+"serial_number"+"}", encodeURIComponent(serialNumber.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update the operational date of a meter by serial number.
     * Update the operational date of a meter. You must have access to the requested system and meter; otherwise a 401 is returned.
     * @param systemId System ID.
     * @param serialNumber Meter serial number.
     * @param operationalDate Operational date in the following format YYYY-MM-DD. (optional)
     * @return UpdateSystemMeterResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateSystemMeter(systemId: kotlin.Int, serialNumber: kotlin.String, operationalDate: java.time.LocalDate? = null) : UpdateSystemMeterResponse {
        val localVarResponse = updateSystemMeterWithHttpInfo(systemId = systemId, serialNumber = serialNumber, operationalDate = operationalDate)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UpdateSystemMeterResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update the operational date of a meter by serial number.
     * Update the operational date of a meter. You must have access to the requested system and meter; otherwise a 401 is returned.
     * @param systemId System ID.
     * @param serialNumber Meter serial number.
     * @param operationalDate Operational date in the following format YYYY-MM-DD. (optional)
     * @return ApiResponse<UpdateSystemMeterResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateSystemMeterWithHttpInfo(systemId: kotlin.Int, serialNumber: kotlin.String, operationalDate: java.time.LocalDate?) : ApiResponse<UpdateSystemMeterResponse?> {
        val localVariableConfig = updateSystemMeterRequestConfig(systemId = systemId, serialNumber = serialNumber, operationalDate = operationalDate)

        return request<Unit, UpdateSystemMeterResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateSystemMeter
     *
     * @param systemId System ID.
     * @param serialNumber Meter serial number.
     * @param operationalDate Operational date in the following format YYYY-MM-DD. (optional)
     * @return RequestConfig
     */
    fun updateSystemMeterRequestConfig(systemId: kotlin.Int, serialNumber: kotlin.String, operationalDate: java.time.LocalDate?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (operationalDate != null) {
                    put("operational_date", listOf(parseDateToQueryString(operationalDate)))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/systems/{system_id}/meters/{serial_number}".replace("{"+"system_id"+"}", encodeURIComponent(systemId.toString())).replace("{"+"serial_number"+"}", encodeURIComponent(serialNumber.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
